Package comp5210;

// I am here.

Helpers
    digit = ['0' .. '9'];
    ascii_char = [32 .. 127] ;
    letter = [['a' .. 'z'] + ['A' .. 'Z']];
	eol = 10|13; 
	negative = '-';
	//everything but a quote is helpful with strings
	no_quote = 32|33|[35 .. 127];

Tokens
	bang = '!';
	whitespace = (' '|9|10|13)+;
	comment = 'comment' (ascii_char|digit)* eol;
	class = 'class';
	public = 'public';
	private = 'private';
	main = 'main';
	return = 'return';
	comma = ',';

	//loops and if else
	loop = 'loop';
	if = 'if';
	else = 'else';

	//math and assignment
	assignment = 'is assigned to';
	plus = 'plus';
	minus = 'minus';
	multiplication = 'times';
	division = 'divided by';

	//comparisons
	equal = 'equals';	
	less = 'is less than';
	greater = 'is greater than';
	less_equal = 'is less than or equal to';
	greater_equal = 'is greater than or equal to';
	at_least = 'is at least';

	//order of operations
	start_parentheses = 'start parentheses';
	end_parentheses = 'end parentheses';
	start_bracket = 'start bracket';
	end_bracket = 'end bracket';
	start_brace = 'start brace';
	end_brace = 'end brace';	
	end = 'end';
	
	//boolean operators
	and = 'and';
	or = 'or';
	not = 'not';

	//types
	float = digit+ '.' digit+ 'e' negative? digit+;
	integer = digit+;	
	
	//variables
	variable = letter+ (letter+'_'?|digit+'_'?)*;

	//strings
	string = '"' (no_quote|'/"')* '"';
			
IgnoredTokens
	whitespace, 
	comment;
	
Productions
		//a program will contain contants methods and a main program in that order
		program = constants methods main_program;

		//constants are declared
		constants = {integer} variable assignment integer end constants |
					{float} variable assignment float end constants |
					{string} variable assignment string end constants |
					{none} ; 
					
		//methods are optional
		methods = {some} public variable start_parentheses init_param end_parentheses start_brace stuff end_brace methods | {none} ;

		//declaration of parameters
		init_param = {some} [var1]:variable [var2]:variable second_param | {none} ;
			
		//if there are more than one set of parameters
		second_param = {others} comma [var1]:variable [var2]:variable second_param |
				{done} ;

		//main program
		main_program = {program} main start_brace stuff end_brace;
				
		//declarations of the variables to be used in the program
		decls =  {var} [var1]:variable [var2]:variable |
				{array} [var1]:variable [var2]:variable start_bracket integer end_bracket;

		//everything that can be done inside a program
		stuff = {decls} decls end stuff |
				{loop} loops stuff | 
				{if_else} if_else stuff |
				{assignment} assignments end stuff |
				{method_call} method_call end stuff |
				{none} ;

		loops = loop circumstance start_brace stuff end_brace;

		//circumstance to continue the loop
		circumstance = {variable_math} start_parentheses variable comparison math end_parentheses |
						{var_string} start_parentheses variable comparison string end_parentheses;

		if_else = if circumstance [first1]:start_brace [first2]:stuff [first3]:end_brace else [second1]:start_brace [second2]:stuff [second3]:end_brace;
		
		comparison = {equal} equal | 
					{less} less | 
					{greater} greater |
					{at_least} at_least |
					{greater_equal} greater_equal |
					{less_equal} less_equal |
					{and} and |
					{or} or |
					{not} not ; 
			
		//assigning numbers, strings, or variables to variables		
		assignments = 	{math} variable assignment math |
						{string} variable assignment string |
						{math_array} variable start_bracket [math1]:math end_bracket assignment [math2]:math |
						{string_array} variable start_bracket math end_bracket assignment string; 

		method_call = variable start_parentheses param end_parentheses;

		//just like the init parameters, but this is when the method is called in the program
		param = {var} variable more_param |
				{string} string more_param |
				{none} ;

		more_param = {others} comma variable | 
					{string} comma string | 
					{done} ;			

		//math using pemdas in reverse order because of the left recursion
		math = {add} math plus multi_divide |
				{sub} math minus multi_divide |
				{none} multi_divide;					

		multi_divide = {multi} multi_divide multiplication parentheses |
						{divide} multi_divide division parentheses |
						{none} parentheses;

		parentheses = {some} start_parentheses math end_parentheses | 
						{variable} variable |
						{integer} integer |
						{float} float;
						 
 		