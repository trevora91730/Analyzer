/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PProgram : Node
{
}

public abstract class PConstants : Node
{
}

public abstract class PMethods : Node
{
}

public abstract class PInitParam : Node
{
}

public abstract class PSecondParam : Node
{
}

public abstract class PMainProgram : Node
{
}

public abstract class PDecls : Node
{
}

public abstract class PStuff : Node
{
}

public abstract class PLoops : Node
{
}

public abstract class PCircumstance : Node
{
}

public abstract class PIfElse : Node
{
}

public abstract class PComparison : Node
{
}

public abstract class PAssignments : Node
{
}

public abstract class PMethodCall : Node
{
}

public abstract class PParam : Node
{
}

public abstract class PMoreParam : Node
{
}

public abstract class PMath : Node
{
}

public abstract class PMultiDivide : Node
{
}

public abstract class PParentheses : Node
{
}


public sealed class AProgram : PProgram
{
    private PConstants _constants_;
    private PMethods _methods_;
    private PMainProgram _main_program_;

    public AProgram ()
    {
    }

    public AProgram (
            PConstants _constants_,
            PMethods _methods_,
            PMainProgram _main_program_
    )
    {
        SetConstants (_constants_);
        SetMethods (_methods_);
        SetMainProgram (_main_program_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PConstants)CloneNode (_constants_),
            (PMethods)CloneNode (_methods_),
            (PMainProgram)CloneNode (_main_program_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }
    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }
    public PMainProgram GetMainProgram ()
    {
        return _main_program_;
    }

    public void SetMainProgram (PMainProgram node)
    {
        if(_main_program_ != null)
        {
            _main_program_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_program_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constants_)
            + ToString (_methods_)
            + ToString (_main_program_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
        if ( _main_program_ == child )
        {
            _main_program_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
        if ( _main_program_ == oldChild )
        {
            SetMainProgram ((PMainProgram) newChild);
            return;
        }
    }

}
public sealed class AIntegerConstants : PConstants
{
    private TVariable _variable_;
    private TAssignment _assignment_;
    private TInteger _integer_;
    private TEnd _end_;
    private PConstants _constants_;

    public AIntegerConstants ()
    {
    }

    public AIntegerConstants (
            TVariable _variable_,
            TAssignment _assignment_,
            TInteger _integer_,
            TEnd _end_,
            PConstants _constants_
    )
    {
        SetVariable (_variable_);
        SetAssignment (_assignment_);
        SetInteger (_integer_);
        SetEnd (_end_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AIntegerConstants (
            (TVariable)CloneNode (_variable_),
            (TAssignment)CloneNode (_assignment_),
            (TInteger)CloneNode (_integer_),
            (TEnd)CloneNode (_end_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerConstants(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }
    public TEnd GetEnd ()
    {
        return _end_;
    }

    public void SetEnd (TEnd node)
    {
        if(_end_ != null)
        {
            _end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_assignment_)
            + ToString (_integer_)
            + ToString (_end_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
        if ( _end_ == child )
        {
            _end_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
        if ( _end_ == oldChild )
        {
            SetEnd ((TEnd) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class AFloatConstants : PConstants
{
    private TVariable _variable_;
    private TAssignment _assignment_;
    private TFloat _float_;
    private TEnd _end_;
    private PConstants _constants_;

    public AFloatConstants ()
    {
    }

    public AFloatConstants (
            TVariable _variable_,
            TAssignment _assignment_,
            TFloat _float_,
            TEnd _end_,
            PConstants _constants_
    )
    {
        SetVariable (_variable_);
        SetAssignment (_assignment_);
        SetFloat (_float_);
        SetEnd (_end_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AFloatConstants (
            (TVariable)CloneNode (_variable_),
            (TAssignment)CloneNode (_assignment_),
            (TFloat)CloneNode (_float_),
            (TEnd)CloneNode (_end_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatConstants(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }
    public TEnd GetEnd ()
    {
        return _end_;
    }

    public void SetEnd (TEnd node)
    {
        if(_end_ != null)
        {
            _end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_assignment_)
            + ToString (_float_)
            + ToString (_end_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
        if ( _end_ == child )
        {
            _end_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
        if ( _end_ == oldChild )
        {
            SetEnd ((TEnd) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class AStringConstants : PConstants
{
    private TVariable _variable_;
    private TAssignment _assignment_;
    private TString _string_;
    private TEnd _end_;
    private PConstants _constants_;

    public AStringConstants ()
    {
    }

    public AStringConstants (
            TVariable _variable_,
            TAssignment _assignment_,
            TString _string_,
            TEnd _end_,
            PConstants _constants_
    )
    {
        SetVariable (_variable_);
        SetAssignment (_assignment_);
        SetString (_string_);
        SetEnd (_end_);
        SetConstants (_constants_);
    }

    public override Object Clone()
    {
        return new AStringConstants (
            (TVariable)CloneNode (_variable_),
            (TAssignment)CloneNode (_assignment_),
            (TString)CloneNode (_string_),
            (TEnd)CloneNode (_end_),
            (PConstants)CloneNode (_constants_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringConstants(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TEnd GetEnd ()
    {
        return _end_;
    }

    public void SetEnd (TEnd node)
    {
        if(_end_ != null)
        {
            _end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_ = node;
    }
    public PConstants GetConstants ()
    {
        return _constants_;
    }

    public void SetConstants (PConstants node)
    {
        if(_constants_ != null)
        {
            _constants_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constants_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_assignment_)
            + ToString (_string_)
            + ToString (_end_)
            + ToString (_constants_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _end_ == child )
        {
            _end_ = null;
            return;
        }
        if ( _constants_ == child )
        {
            _constants_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _end_ == oldChild )
        {
            SetEnd ((TEnd) newChild);
            return;
        }
        if ( _constants_ == oldChild )
        {
            SetConstants ((PConstants) newChild);
            return;
        }
    }

}
public sealed class ANoneConstants : PConstants
{


    public ANoneConstants (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneConstants (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneConstants(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASomeMethods : PMethods
{
    private TPublic _public_;
    private TVariable _variable_;
    private TStartParentheses _start_parentheses_;
    private PInitParam _init_param_;
    private TEndParentheses _end_parentheses_;
    private TStartBrace _start_brace_;
    private PStuff _stuff_;
    private TEndBrace _end_brace_;
    private PMethods _methods_;

    public ASomeMethods ()
    {
    }

    public ASomeMethods (
            TPublic _public_,
            TVariable _variable_,
            TStartParentheses _start_parentheses_,
            PInitParam _init_param_,
            TEndParentheses _end_parentheses_,
            TStartBrace _start_brace_,
            PStuff _stuff_,
            TEndBrace _end_brace_,
            PMethods _methods_
    )
    {
        SetPublic (_public_);
        SetVariable (_variable_);
        SetStartParentheses (_start_parentheses_);
        SetInitParam (_init_param_);
        SetEndParentheses (_end_parentheses_);
        SetStartBrace (_start_brace_);
        SetStuff (_stuff_);
        SetEndBrace (_end_brace_);
        SetMethods (_methods_);
    }

    public override Object Clone()
    {
        return new ASomeMethods (
            (TPublic)CloneNode (_public_),
            (TVariable)CloneNode (_variable_),
            (TStartParentheses)CloneNode (_start_parentheses_),
            (PInitParam)CloneNode (_init_param_),
            (TEndParentheses)CloneNode (_end_parentheses_),
            (TStartBrace)CloneNode (_start_brace_),
            (PStuff)CloneNode (_stuff_),
            (TEndBrace)CloneNode (_end_brace_),
            (PMethods)CloneNode (_methods_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeMethods(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TStartParentheses GetStartParentheses ()
    {
        return _start_parentheses_;
    }

    public void SetStartParentheses (TStartParentheses node)
    {
        if(_start_parentheses_ != null)
        {
            _start_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_parentheses_ = node;
    }
    public PInitParam GetInitParam ()
    {
        return _init_param_;
    }

    public void SetInitParam (PInitParam node)
    {
        if(_init_param_ != null)
        {
            _init_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _init_param_ = node;
    }
    public TEndParentheses GetEndParentheses ()
    {
        return _end_parentheses_;
    }

    public void SetEndParentheses (TEndParentheses node)
    {
        if(_end_parentheses_ != null)
        {
            _end_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_parentheses_ = node;
    }
    public TStartBrace GetStartBrace ()
    {
        return _start_brace_;
    }

    public void SetStartBrace (TStartBrace node)
    {
        if(_start_brace_ != null)
        {
            _start_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_brace_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TEndBrace GetEndBrace ()
    {
        return _end_brace_;
    }

    public void SetEndBrace (TEndBrace node)
    {
        if(_end_brace_ != null)
        {
            _end_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_brace_ = node;
    }
    public PMethods GetMethods ()
    {
        return _methods_;
    }

    public void SetMethods (PMethods node)
    {
        if(_methods_ != null)
        {
            _methods_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _methods_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_variable_)
            + ToString (_start_parentheses_)
            + ToString (_init_param_)
            + ToString (_end_parentheses_)
            + ToString (_start_brace_)
            + ToString (_stuff_)
            + ToString (_end_brace_)
            + ToString (_methods_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _start_parentheses_ == child )
        {
            _start_parentheses_ = null;
            return;
        }
        if ( _init_param_ == child )
        {
            _init_param_ = null;
            return;
        }
        if ( _end_parentheses_ == child )
        {
            _end_parentheses_ = null;
            return;
        }
        if ( _start_brace_ == child )
        {
            _start_brace_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _end_brace_ == child )
        {
            _end_brace_ = null;
            return;
        }
        if ( _methods_ == child )
        {
            _methods_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _start_parentheses_ == oldChild )
        {
            SetStartParentheses ((TStartParentheses) newChild);
            return;
        }
        if ( _init_param_ == oldChild )
        {
            SetInitParam ((PInitParam) newChild);
            return;
        }
        if ( _end_parentheses_ == oldChild )
        {
            SetEndParentheses ((TEndParentheses) newChild);
            return;
        }
        if ( _start_brace_ == oldChild )
        {
            SetStartBrace ((TStartBrace) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _end_brace_ == oldChild )
        {
            SetEndBrace ((TEndBrace) newChild);
            return;
        }
        if ( _methods_ == oldChild )
        {
            SetMethods ((PMethods) newChild);
            return;
        }
    }

}
public sealed class ANoneMethods : PMethods
{


    public ANoneMethods (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneMethods (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneMethods(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ASomeInitParam : PInitParam
{
    private TVariable _var1_;
    private TVariable _var2_;
    private PSecondParam _second_param_;

    public ASomeInitParam ()
    {
    }

    public ASomeInitParam (
            TVariable _var1_,
            TVariable _var2_,
            PSecondParam _second_param_
    )
    {
        SetVar1 (_var1_);
        SetVar2 (_var2_);
        SetSecondParam (_second_param_);
    }

    public override Object Clone()
    {
        return new ASomeInitParam (
            (TVariable)CloneNode (_var1_),
            (TVariable)CloneNode (_var2_),
            (PSecondParam)CloneNode (_second_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeInitParam(this);
    }

    public TVariable GetVar1 ()
    {
        return _var1_;
    }

    public void SetVar1 (TVariable node)
    {
        if(_var1_ != null)
        {
            _var1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var1_ = node;
    }
    public TVariable GetVar2 ()
    {
        return _var2_;
    }

    public void SetVar2 (TVariable node)
    {
        if(_var2_ != null)
        {
            _var2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var2_ = node;
    }
    public PSecondParam GetSecondParam ()
    {
        return _second_param_;
    }

    public void SetSecondParam (PSecondParam node)
    {
        if(_second_param_ != null)
        {
            _second_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var1_)
            + ToString (_var2_)
            + ToString (_second_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var1_ == child )
        {
            _var1_ = null;
            return;
        }
        if ( _var2_ == child )
        {
            _var2_ = null;
            return;
        }
        if ( _second_param_ == child )
        {
            _second_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var1_ == oldChild )
        {
            SetVar1 ((TVariable) newChild);
            return;
        }
        if ( _var2_ == oldChild )
        {
            SetVar2 ((TVariable) newChild);
            return;
        }
        if ( _second_param_ == oldChild )
        {
            SetSecondParam ((PSecondParam) newChild);
            return;
        }
    }

}
public sealed class ANoneInitParam : PInitParam
{


    public ANoneInitParam (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneInitParam (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneInitParam(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AOthersSecondParam : PSecondParam
{
    private TComma _comma_;
    private TVariable _var1_;
    private TVariable _var2_;
    private PSecondParam _second_param_;

    public AOthersSecondParam ()
    {
    }

    public AOthersSecondParam (
            TComma _comma_,
            TVariable _var1_,
            TVariable _var2_,
            PSecondParam _second_param_
    )
    {
        SetComma (_comma_);
        SetVar1 (_var1_);
        SetVar2 (_var2_);
        SetSecondParam (_second_param_);
    }

    public override Object Clone()
    {
        return new AOthersSecondParam (
            (TComma)CloneNode (_comma_),
            (TVariable)CloneNode (_var1_),
            (TVariable)CloneNode (_var2_),
            (PSecondParam)CloneNode (_second_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOthersSecondParam(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TVariable GetVar1 ()
    {
        return _var1_;
    }

    public void SetVar1 (TVariable node)
    {
        if(_var1_ != null)
        {
            _var1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var1_ = node;
    }
    public TVariable GetVar2 ()
    {
        return _var2_;
    }

    public void SetVar2 (TVariable node)
    {
        if(_var2_ != null)
        {
            _var2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var2_ = node;
    }
    public PSecondParam GetSecondParam ()
    {
        return _second_param_;
    }

    public void SetSecondParam (PSecondParam node)
    {
        if(_second_param_ != null)
        {
            _second_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_var1_)
            + ToString (_var2_)
            + ToString (_second_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _var1_ == child )
        {
            _var1_ = null;
            return;
        }
        if ( _var2_ == child )
        {
            _var2_ = null;
            return;
        }
        if ( _second_param_ == child )
        {
            _second_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _var1_ == oldChild )
        {
            SetVar1 ((TVariable) newChild);
            return;
        }
        if ( _var2_ == oldChild )
        {
            SetVar2 ((TVariable) newChild);
            return;
        }
        if ( _second_param_ == oldChild )
        {
            SetSecondParam ((PSecondParam) newChild);
            return;
        }
    }

}
public sealed class ADoneSecondParam : PSecondParam
{


    public ADoneSecondParam (
    )
    {
    }

    public override Object Clone()
    {
        return new ADoneSecondParam (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADoneSecondParam(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AProgramMainProgram : PMainProgram
{
    private TMain _main_;
    private TStartBrace _start_brace_;
    private PStuff _stuff_;
    private TEndBrace _end_brace_;

    public AProgramMainProgram ()
    {
    }

    public AProgramMainProgram (
            TMain _main_,
            TStartBrace _start_brace_,
            PStuff _stuff_,
            TEndBrace _end_brace_
    )
    {
        SetMain (_main_);
        SetStartBrace (_start_brace_);
        SetStuff (_stuff_);
        SetEndBrace (_end_brace_);
    }

    public override Object Clone()
    {
        return new AProgramMainProgram (
            (TMain)CloneNode (_main_),
            (TStartBrace)CloneNode (_start_brace_),
            (PStuff)CloneNode (_stuff_),
            (TEndBrace)CloneNode (_end_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgramMainProgram(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TStartBrace GetStartBrace ()
    {
        return _start_brace_;
    }

    public void SetStartBrace (TStartBrace node)
    {
        if(_start_brace_ != null)
        {
            _start_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_brace_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TEndBrace GetEndBrace ()
    {
        return _end_brace_;
    }

    public void SetEndBrace (TEndBrace node)
    {
        if(_end_brace_ != null)
        {
            _end_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_start_brace_)
            + ToString (_stuff_)
            + ToString (_end_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _start_brace_ == child )
        {
            _start_brace_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _end_brace_ == child )
        {
            _end_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _start_brace_ == oldChild )
        {
            SetStartBrace ((TStartBrace) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _end_brace_ == oldChild )
        {
            SetEndBrace ((TEndBrace) newChild);
            return;
        }
    }

}
public sealed class AVarDecls : PDecls
{
    private TVariable _var1_;
    private TVariable _var2_;

    public AVarDecls ()
    {
    }

    public AVarDecls (
            TVariable _var1_,
            TVariable _var2_
    )
    {
        SetVar1 (_var1_);
        SetVar2 (_var2_);
    }

    public override Object Clone()
    {
        return new AVarDecls (
            (TVariable)CloneNode (_var1_),
            (TVariable)CloneNode (_var2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarDecls(this);
    }

    public TVariable GetVar1 ()
    {
        return _var1_;
    }

    public void SetVar1 (TVariable node)
    {
        if(_var1_ != null)
        {
            _var1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var1_ = node;
    }
    public TVariable GetVar2 ()
    {
        return _var2_;
    }

    public void SetVar2 (TVariable node)
    {
        if(_var2_ != null)
        {
            _var2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var1_)
            + ToString (_var2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var1_ == child )
        {
            _var1_ = null;
            return;
        }
        if ( _var2_ == child )
        {
            _var2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var1_ == oldChild )
        {
            SetVar1 ((TVariable) newChild);
            return;
        }
        if ( _var2_ == oldChild )
        {
            SetVar2 ((TVariable) newChild);
            return;
        }
    }

}
public sealed class AArrayDecls : PDecls
{
    private TVariable _var1_;
    private TVariable _var2_;
    private TStartBracket _start_bracket_;
    private TInteger _integer_;
    private TEndBracket _end_bracket_;

    public AArrayDecls ()
    {
    }

    public AArrayDecls (
            TVariable _var1_,
            TVariable _var2_,
            TStartBracket _start_bracket_,
            TInteger _integer_,
            TEndBracket _end_bracket_
    )
    {
        SetVar1 (_var1_);
        SetVar2 (_var2_);
        SetStartBracket (_start_bracket_);
        SetInteger (_integer_);
        SetEndBracket (_end_bracket_);
    }

    public override Object Clone()
    {
        return new AArrayDecls (
            (TVariable)CloneNode (_var1_),
            (TVariable)CloneNode (_var2_),
            (TStartBracket)CloneNode (_start_bracket_),
            (TInteger)CloneNode (_integer_),
            (TEndBracket)CloneNode (_end_bracket_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAArrayDecls(this);
    }

    public TVariable GetVar1 ()
    {
        return _var1_;
    }

    public void SetVar1 (TVariable node)
    {
        if(_var1_ != null)
        {
            _var1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var1_ = node;
    }
    public TVariable GetVar2 ()
    {
        return _var2_;
    }

    public void SetVar2 (TVariable node)
    {
        if(_var2_ != null)
        {
            _var2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _var2_ = node;
    }
    public TStartBracket GetStartBracket ()
    {
        return _start_bracket_;
    }

    public void SetStartBracket (TStartBracket node)
    {
        if(_start_bracket_ != null)
        {
            _start_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_bracket_ = node;
    }
    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }
    public TEndBracket GetEndBracket ()
    {
        return _end_bracket_;
    }

    public void SetEndBracket (TEndBracket node)
    {
        if(_end_bracket_ != null)
        {
            _end_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_bracket_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_var1_)
            + ToString (_var2_)
            + ToString (_start_bracket_)
            + ToString (_integer_)
            + ToString (_end_bracket_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _var1_ == child )
        {
            _var1_ = null;
            return;
        }
        if ( _var2_ == child )
        {
            _var2_ = null;
            return;
        }
        if ( _start_bracket_ == child )
        {
            _start_bracket_ = null;
            return;
        }
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
        if ( _end_bracket_ == child )
        {
            _end_bracket_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _var1_ == oldChild )
        {
            SetVar1 ((TVariable) newChild);
            return;
        }
        if ( _var2_ == oldChild )
        {
            SetVar2 ((TVariable) newChild);
            return;
        }
        if ( _start_bracket_ == oldChild )
        {
            SetStartBracket ((TStartBracket) newChild);
            return;
        }
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
        if ( _end_bracket_ == oldChild )
        {
            SetEndBracket ((TEndBracket) newChild);
            return;
        }
    }

}
public sealed class ADeclsStuff : PStuff
{
    private PDecls _decls_;
    private TEnd _end_;
    private PStuff _stuff_;

    public ADeclsStuff ()
    {
    }

    public ADeclsStuff (
            PDecls _decls_,
            TEnd _end_,
            PStuff _stuff_
    )
    {
        SetDecls (_decls_);
        SetEnd (_end_);
        SetStuff (_stuff_);
    }

    public override Object Clone()
    {
        return new ADeclsStuff (
            (PDecls)CloneNode (_decls_),
            (TEnd)CloneNode (_end_),
            (PStuff)CloneNode (_stuff_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclsStuff(this);
    }

    public PDecls GetDecls ()
    {
        return _decls_;
    }

    public void SetDecls (PDecls node)
    {
        if(_decls_ != null)
        {
            _decls_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _decls_ = node;
    }
    public TEnd GetEnd ()
    {
        return _end_;
    }

    public void SetEnd (TEnd node)
    {
        if(_end_ != null)
        {
            _end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_decls_)
            + ToString (_end_)
            + ToString (_stuff_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _decls_ == child )
        {
            _decls_ = null;
            return;
        }
        if ( _end_ == child )
        {
            _end_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _decls_ == oldChild )
        {
            SetDecls ((PDecls) newChild);
            return;
        }
        if ( _end_ == oldChild )
        {
            SetEnd ((TEnd) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
    }

}
public sealed class ALoopStuff : PStuff
{
    private PLoops _loops_;
    private PStuff _stuff_;

    public ALoopStuff ()
    {
    }

    public ALoopStuff (
            PLoops _loops_,
            PStuff _stuff_
    )
    {
        SetLoops (_loops_);
        SetStuff (_stuff_);
    }

    public override Object Clone()
    {
        return new ALoopStuff (
            (PLoops)CloneNode (_loops_),
            (PStuff)CloneNode (_stuff_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoopStuff(this);
    }

    public PLoops GetLoops ()
    {
        return _loops_;
    }

    public void SetLoops (PLoops node)
    {
        if(_loops_ != null)
        {
            _loops_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loops_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loops_)
            + ToString (_stuff_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loops_ == child )
        {
            _loops_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loops_ == oldChild )
        {
            SetLoops ((PLoops) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
    }

}
public sealed class AIfElseStuff : PStuff
{
    private PIfElse _if_else_;
    private PStuff _stuff_;

    public AIfElseStuff ()
    {
    }

    public AIfElseStuff (
            PIfElse _if_else_,
            PStuff _stuff_
    )
    {
        SetIfElse (_if_else_);
        SetStuff (_stuff_);
    }

    public override Object Clone()
    {
        return new AIfElseStuff (
            (PIfElse)CloneNode (_if_else_),
            (PStuff)CloneNode (_stuff_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfElseStuff(this);
    }

    public PIfElse GetIfElse ()
    {
        return _if_else_;
    }

    public void SetIfElse (PIfElse node)
    {
        if(_if_else_ != null)
        {
            _if_else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_else_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_else_)
            + ToString (_stuff_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_else_ == child )
        {
            _if_else_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_else_ == oldChild )
        {
            SetIfElse ((PIfElse) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
    }

}
public sealed class AAssignmentStuff : PStuff
{
    private PAssignments _assignments_;
    private TEnd _end_;
    private PStuff _stuff_;

    public AAssignmentStuff ()
    {
    }

    public AAssignmentStuff (
            PAssignments _assignments_,
            TEnd _end_,
            PStuff _stuff_
    )
    {
        SetAssignments (_assignments_);
        SetEnd (_end_);
        SetStuff (_stuff_);
    }

    public override Object Clone()
    {
        return new AAssignmentStuff (
            (PAssignments)CloneNode (_assignments_),
            (TEnd)CloneNode (_end_),
            (PStuff)CloneNode (_stuff_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStuff(this);
    }

    public PAssignments GetAssignments ()
    {
        return _assignments_;
    }

    public void SetAssignments (PAssignments node)
    {
        if(_assignments_ != null)
        {
            _assignments_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignments_ = node;
    }
    public TEnd GetEnd ()
    {
        return _end_;
    }

    public void SetEnd (TEnd node)
    {
        if(_end_ != null)
        {
            _end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignments_)
            + ToString (_end_)
            + ToString (_stuff_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignments_ == child )
        {
            _assignments_ = null;
            return;
        }
        if ( _end_ == child )
        {
            _end_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignments_ == oldChild )
        {
            SetAssignments ((PAssignments) newChild);
            return;
        }
        if ( _end_ == oldChild )
        {
            SetEnd ((TEnd) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
    }

}
public sealed class AMethodCallStuff : PStuff
{
    private PMethodCall _method_call_;
    private TEnd _end_;
    private PStuff _stuff_;

    public AMethodCallStuff ()
    {
    }

    public AMethodCallStuff (
            PMethodCall _method_call_,
            TEnd _end_,
            PStuff _stuff_
    )
    {
        SetMethodCall (_method_call_);
        SetEnd (_end_);
        SetStuff (_stuff_);
    }

    public override Object Clone()
    {
        return new AMethodCallStuff (
            (PMethodCall)CloneNode (_method_call_),
            (TEnd)CloneNode (_end_),
            (PStuff)CloneNode (_stuff_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodCallStuff(this);
    }

    public PMethodCall GetMethodCall ()
    {
        return _method_call_;
    }

    public void SetMethodCall (PMethodCall node)
    {
        if(_method_call_ != null)
        {
            _method_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _method_call_ = node;
    }
    public TEnd GetEnd ()
    {
        return _end_;
    }

    public void SetEnd (TEnd node)
    {
        if(_end_ != null)
        {
            _end_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_method_call_)
            + ToString (_end_)
            + ToString (_stuff_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _method_call_ == child )
        {
            _method_call_ = null;
            return;
        }
        if ( _end_ == child )
        {
            _end_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _method_call_ == oldChild )
        {
            SetMethodCall ((PMethodCall) newChild);
            return;
        }
        if ( _end_ == oldChild )
        {
            SetEnd ((TEnd) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
    }

}
public sealed class ANoneStuff : PStuff
{


    public ANoneStuff (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneStuff (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneStuff(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ALoops : PLoops
{
    private TLoop _loop_;
    private PCircumstance _circumstance_;
    private TStartBrace _start_brace_;
    private PStuff _stuff_;
    private TEndBrace _end_brace_;

    public ALoops ()
    {
    }

    public ALoops (
            TLoop _loop_,
            PCircumstance _circumstance_,
            TStartBrace _start_brace_,
            PStuff _stuff_,
            TEndBrace _end_brace_
    )
    {
        SetLoop (_loop_);
        SetCircumstance (_circumstance_);
        SetStartBrace (_start_brace_);
        SetStuff (_stuff_);
        SetEndBrace (_end_brace_);
    }

    public override Object Clone()
    {
        return new ALoops (
            (TLoop)CloneNode (_loop_),
            (PCircumstance)CloneNode (_circumstance_),
            (TStartBrace)CloneNode (_start_brace_),
            (PStuff)CloneNode (_stuff_),
            (TEndBrace)CloneNode (_end_brace_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALoops(this);
    }

    public TLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (TLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }
    public PCircumstance GetCircumstance ()
    {
        return _circumstance_;
    }

    public void SetCircumstance (PCircumstance node)
    {
        if(_circumstance_ != null)
        {
            _circumstance_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _circumstance_ = node;
    }
    public TStartBrace GetStartBrace ()
    {
        return _start_brace_;
    }

    public void SetStartBrace (TStartBrace node)
    {
        if(_start_brace_ != null)
        {
            _start_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_brace_ = node;
    }
    public PStuff GetStuff ()
    {
        return _stuff_;
    }

    public void SetStuff (PStuff node)
    {
        if(_stuff_ != null)
        {
            _stuff_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _stuff_ = node;
    }
    public TEndBrace GetEndBrace ()
    {
        return _end_brace_;
    }

    public void SetEndBrace (TEndBrace node)
    {
        if(_end_brace_ != null)
        {
            _end_brace_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_brace_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_)
            + ToString (_circumstance_)
            + ToString (_start_brace_)
            + ToString (_stuff_)
            + ToString (_end_brace_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
        if ( _circumstance_ == child )
        {
            _circumstance_ = null;
            return;
        }
        if ( _start_brace_ == child )
        {
            _start_brace_ = null;
            return;
        }
        if ( _stuff_ == child )
        {
            _stuff_ = null;
            return;
        }
        if ( _end_brace_ == child )
        {
            _end_brace_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_ == oldChild )
        {
            SetLoop ((TLoop) newChild);
            return;
        }
        if ( _circumstance_ == oldChild )
        {
            SetCircumstance ((PCircumstance) newChild);
            return;
        }
        if ( _start_brace_ == oldChild )
        {
            SetStartBrace ((TStartBrace) newChild);
            return;
        }
        if ( _stuff_ == oldChild )
        {
            SetStuff ((PStuff) newChild);
            return;
        }
        if ( _end_brace_ == oldChild )
        {
            SetEndBrace ((TEndBrace) newChild);
            return;
        }
    }

}
public sealed class AVariableMathCircumstance : PCircumstance
{
    private TStartParentheses _start_parentheses_;
    private TVariable _variable_;
    private PComparison _comparison_;
    private PMath _math_;
    private TEndParentheses _end_parentheses_;

    public AVariableMathCircumstance ()
    {
    }

    public AVariableMathCircumstance (
            TStartParentheses _start_parentheses_,
            TVariable _variable_,
            PComparison _comparison_,
            PMath _math_,
            TEndParentheses _end_parentheses_
    )
    {
        SetStartParentheses (_start_parentheses_);
        SetVariable (_variable_);
        SetComparison (_comparison_);
        SetMath (_math_);
        SetEndParentheses (_end_parentheses_);
    }

    public override Object Clone()
    {
        return new AVariableMathCircumstance (
            (TStartParentheses)CloneNode (_start_parentheses_),
            (TVariable)CloneNode (_variable_),
            (PComparison)CloneNode (_comparison_),
            (PMath)CloneNode (_math_),
            (TEndParentheses)CloneNode (_end_parentheses_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableMathCircumstance(this);
    }

    public TStartParentheses GetStartParentheses ()
    {
        return _start_parentheses_;
    }

    public void SetStartParentheses (TStartParentheses node)
    {
        if(_start_parentheses_ != null)
        {
            _start_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_parentheses_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PComparison GetComparison ()
    {
        return _comparison_;
    }

    public void SetComparison (PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparison_ = node;
    }
    public PMath GetMath ()
    {
        return _math_;
    }

    public void SetMath (PMath node)
    {
        if(_math_ != null)
        {
            _math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_ = node;
    }
    public TEndParentheses GetEndParentheses ()
    {
        return _end_parentheses_;
    }

    public void SetEndParentheses (TEndParentheses node)
    {
        if(_end_parentheses_ != null)
        {
            _end_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_parentheses_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_start_parentheses_)
            + ToString (_variable_)
            + ToString (_comparison_)
            + ToString (_math_)
            + ToString (_end_parentheses_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _start_parentheses_ == child )
        {
            _start_parentheses_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _comparison_ == child )
        {
            _comparison_ = null;
            return;
        }
        if ( _math_ == child )
        {
            _math_ = null;
            return;
        }
        if ( _end_parentheses_ == child )
        {
            _end_parentheses_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _start_parentheses_ == oldChild )
        {
            SetStartParentheses ((TStartParentheses) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _comparison_ == oldChild )
        {
            SetComparison ((PComparison) newChild);
            return;
        }
        if ( _math_ == oldChild )
        {
            SetMath ((PMath) newChild);
            return;
        }
        if ( _end_parentheses_ == oldChild )
        {
            SetEndParentheses ((TEndParentheses) newChild);
            return;
        }
    }

}
public sealed class AVarStringCircumstance : PCircumstance
{
    private TStartParentheses _start_parentheses_;
    private TVariable _variable_;
    private PComparison _comparison_;
    private TString _string_;
    private TEndParentheses _end_parentheses_;

    public AVarStringCircumstance ()
    {
    }

    public AVarStringCircumstance (
            TStartParentheses _start_parentheses_,
            TVariable _variable_,
            PComparison _comparison_,
            TString _string_,
            TEndParentheses _end_parentheses_
    )
    {
        SetStartParentheses (_start_parentheses_);
        SetVariable (_variable_);
        SetComparison (_comparison_);
        SetString (_string_);
        SetEndParentheses (_end_parentheses_);
    }

    public override Object Clone()
    {
        return new AVarStringCircumstance (
            (TStartParentheses)CloneNode (_start_parentheses_),
            (TVariable)CloneNode (_variable_),
            (PComparison)CloneNode (_comparison_),
            (TString)CloneNode (_string_),
            (TEndParentheses)CloneNode (_end_parentheses_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarStringCircumstance(this);
    }

    public TStartParentheses GetStartParentheses ()
    {
        return _start_parentheses_;
    }

    public void SetStartParentheses (TStartParentheses node)
    {
        if(_start_parentheses_ != null)
        {
            _start_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_parentheses_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PComparison GetComparison ()
    {
        return _comparison_;
    }

    public void SetComparison (PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparison_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public TEndParentheses GetEndParentheses ()
    {
        return _end_parentheses_;
    }

    public void SetEndParentheses (TEndParentheses node)
    {
        if(_end_parentheses_ != null)
        {
            _end_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_parentheses_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_start_parentheses_)
            + ToString (_variable_)
            + ToString (_comparison_)
            + ToString (_string_)
            + ToString (_end_parentheses_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _start_parentheses_ == child )
        {
            _start_parentheses_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _comparison_ == child )
        {
            _comparison_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _end_parentheses_ == child )
        {
            _end_parentheses_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _start_parentheses_ == oldChild )
        {
            SetStartParentheses ((TStartParentheses) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _comparison_ == oldChild )
        {
            SetComparison ((PComparison) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _end_parentheses_ == oldChild )
        {
            SetEndParentheses ((TEndParentheses) newChild);
            return;
        }
    }

}
public sealed class AIfElse : PIfElse
{
    private TIf _if_;
    private PCircumstance _circumstance_;
    private TStartBrace _first1_;
    private PStuff _first2_;
    private TEndBrace _first3_;
    private TElse _else_;
    private TStartBrace _second1_;
    private PStuff _second2_;
    private TEndBrace _second3_;

    public AIfElse ()
    {
    }

    public AIfElse (
            TIf _if_,
            PCircumstance _circumstance_,
            TStartBrace _first1_,
            PStuff _first2_,
            TEndBrace _first3_,
            TElse _else_,
            TStartBrace _second1_,
            PStuff _second2_,
            TEndBrace _second3_
    )
    {
        SetIf (_if_);
        SetCircumstance (_circumstance_);
        SetFirst1 (_first1_);
        SetFirst2 (_first2_);
        SetFirst3 (_first3_);
        SetElse (_else_);
        SetSecond1 (_second1_);
        SetSecond2 (_second2_);
        SetSecond3 (_second3_);
    }

    public override Object Clone()
    {
        return new AIfElse (
            (TIf)CloneNode (_if_),
            (PCircumstance)CloneNode (_circumstance_),
            (TStartBrace)CloneNode (_first1_),
            (PStuff)CloneNode (_first2_),
            (TEndBrace)CloneNode (_first3_),
            (TElse)CloneNode (_else_),
            (TStartBrace)CloneNode (_second1_),
            (PStuff)CloneNode (_second2_),
            (TEndBrace)CloneNode (_second3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfElse(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public PCircumstance GetCircumstance ()
    {
        return _circumstance_;
    }

    public void SetCircumstance (PCircumstance node)
    {
        if(_circumstance_ != null)
        {
            _circumstance_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _circumstance_ = node;
    }
    public TStartBrace GetFirst1 ()
    {
        return _first1_;
    }

    public void SetFirst1 (TStartBrace node)
    {
        if(_first1_ != null)
        {
            _first1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first1_ = node;
    }
    public PStuff GetFirst2 ()
    {
        return _first2_;
    }

    public void SetFirst2 (PStuff node)
    {
        if(_first2_ != null)
        {
            _first2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first2_ = node;
    }
    public TEndBrace GetFirst3 ()
    {
        return _first3_;
    }

    public void SetFirst3 (TEndBrace node)
    {
        if(_first3_ != null)
        {
            _first3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _first3_ = node;
    }
    public TElse GetElse ()
    {
        return _else_;
    }

    public void SetElse (TElse node)
    {
        if(_else_ != null)
        {
            _else_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _else_ = node;
    }
    public TStartBrace GetSecond1 ()
    {
        return _second1_;
    }

    public void SetSecond1 (TStartBrace node)
    {
        if(_second1_ != null)
        {
            _second1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second1_ = node;
    }
    public PStuff GetSecond2 ()
    {
        return _second2_;
    }

    public void SetSecond2 (PStuff node)
    {
        if(_second2_ != null)
        {
            _second2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second2_ = node;
    }
    public TEndBrace GetSecond3 ()
    {
        return _second3_;
    }

    public void SetSecond3 (TEndBrace node)
    {
        if(_second3_ != null)
        {
            _second3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _second3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_circumstance_)
            + ToString (_first1_)
            + ToString (_first2_)
            + ToString (_first3_)
            + ToString (_else_)
            + ToString (_second1_)
            + ToString (_second2_)
            + ToString (_second3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _circumstance_ == child )
        {
            _circumstance_ = null;
            return;
        }
        if ( _first1_ == child )
        {
            _first1_ = null;
            return;
        }
        if ( _first2_ == child )
        {
            _first2_ = null;
            return;
        }
        if ( _first3_ == child )
        {
            _first3_ = null;
            return;
        }
        if ( _else_ == child )
        {
            _else_ = null;
            return;
        }
        if ( _second1_ == child )
        {
            _second1_ = null;
            return;
        }
        if ( _second2_ == child )
        {
            _second2_ = null;
            return;
        }
        if ( _second3_ == child )
        {
            _second3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _circumstance_ == oldChild )
        {
            SetCircumstance ((PCircumstance) newChild);
            return;
        }
        if ( _first1_ == oldChild )
        {
            SetFirst1 ((TStartBrace) newChild);
            return;
        }
        if ( _first2_ == oldChild )
        {
            SetFirst2 ((PStuff) newChild);
            return;
        }
        if ( _first3_ == oldChild )
        {
            SetFirst3 ((TEndBrace) newChild);
            return;
        }
        if ( _else_ == oldChild )
        {
            SetElse ((TElse) newChild);
            return;
        }
        if ( _second1_ == oldChild )
        {
            SetSecond1 ((TStartBrace) newChild);
            return;
        }
        if ( _second2_ == oldChild )
        {
            SetSecond2 ((PStuff) newChild);
            return;
        }
        if ( _second3_ == oldChild )
        {
            SetSecond3 ((TEndBrace) newChild);
            return;
        }
    }

}
public sealed class AEqualComparison : PComparison
{
    private TEqual _equal_;

    public AEqualComparison ()
    {
    }

    public AEqualComparison (
            TEqual _equal_
    )
    {
        SetEqual (_equal_);
    }

    public override Object Clone()
    {
        return new AEqualComparison (
            (TEqual)CloneNode (_equal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualComparison(this);
    }

    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
    }

}
public sealed class ALessComparison : PComparison
{
    private TLess _less_;

    public ALessComparison ()
    {
    }

    public ALessComparison (
            TLess _less_
    )
    {
        SetLess (_less_);
    }

    public override Object Clone()
    {
        return new ALessComparison (
            (TLess)CloneNode (_less_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessComparison(this);
    }

    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
    }

}
public sealed class AGreaterComparison : PComparison
{
    private TGreater _greater_;

    public AGreaterComparison ()
    {
    }

    public AGreaterComparison (
            TGreater _greater_
    )
    {
        SetGreater (_greater_);
    }

    public override Object Clone()
    {
        return new AGreaterComparison (
            (TGreater)CloneNode (_greater_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterComparison(this);
    }

    public TGreater GetGreater ()
    {
        return _greater_;
    }

    public void SetGreater (TGreater node)
    {
        if(_greater_ != null)
        {
            _greater_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greater_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greater_ == child )
        {
            _greater_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greater_ == oldChild )
        {
            SetGreater ((TGreater) newChild);
            return;
        }
    }

}
public sealed class AAtLeastComparison : PComparison
{
    private TAtLeast _at_least_;

    public AAtLeastComparison ()
    {
    }

    public AAtLeastComparison (
            TAtLeast _at_least_
    )
    {
        SetAtLeast (_at_least_);
    }

    public override Object Clone()
    {
        return new AAtLeastComparison (
            (TAtLeast)CloneNode (_at_least_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAtLeastComparison(this);
    }

    public TAtLeast GetAtLeast ()
    {
        return _at_least_;
    }

    public void SetAtLeast (TAtLeast node)
    {
        if(_at_least_ != null)
        {
            _at_least_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _at_least_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_at_least_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _at_least_ == child )
        {
            _at_least_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _at_least_ == oldChild )
        {
            SetAtLeast ((TAtLeast) newChild);
            return;
        }
    }

}
public sealed class AGreaterEqualComparison : PComparison
{
    private TGreaterEqual _greater_equal_;

    public AGreaterEqualComparison ()
    {
    }

    public AGreaterEqualComparison (
            TGreaterEqual _greater_equal_
    )
    {
        SetGreaterEqual (_greater_equal_);
    }

    public override Object Clone()
    {
        return new AGreaterEqualComparison (
            (TGreaterEqual)CloneNode (_greater_equal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterEqualComparison(this);
    }

    public TGreaterEqual GetGreaterEqual ()
    {
        return _greater_equal_;
    }

    public void SetGreaterEqual (TGreaterEqual node)
    {
        if(_greater_equal_ != null)
        {
            _greater_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _greater_equal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_greater_equal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _greater_equal_ == child )
        {
            _greater_equal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _greater_equal_ == oldChild )
        {
            SetGreaterEqual ((TGreaterEqual) newChild);
            return;
        }
    }

}
public sealed class ALessEqualComparison : PComparison
{
    private TLessEqual _less_equal_;

    public ALessEqualComparison ()
    {
    }

    public ALessEqualComparison (
            TLessEqual _less_equal_
    )
    {
        SetLessEqual (_less_equal_);
    }

    public override Object Clone()
    {
        return new ALessEqualComparison (
            (TLessEqual)CloneNode (_less_equal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessEqualComparison(this);
    }

    public TLessEqual GetLessEqual ()
    {
        return _less_equal_;
    }

    public void SetLessEqual (TLessEqual node)
    {
        if(_less_equal_ != null)
        {
            _less_equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_equal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_equal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_equal_ == child )
        {
            _less_equal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_equal_ == oldChild )
        {
            SetLessEqual ((TLessEqual) newChild);
            return;
        }
    }

}
public sealed class AAndComparison : PComparison
{
    private TAnd _and_;

    public AAndComparison ()
    {
    }

    public AAndComparison (
            TAnd _and_
    )
    {
        SetAnd (_and_);
    }

    public override Object Clone()
    {
        return new AAndComparison (
            (TAnd)CloneNode (_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndComparison(this);
    }

    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
    }

}
public sealed class AOrComparison : PComparison
{
    private TOr _or_;

    public AOrComparison ()
    {
    }

    public AOrComparison (
            TOr _or_
    )
    {
        SetOr (_or_);
    }

    public override Object Clone()
    {
        return new AOrComparison (
            (TOr)CloneNode (_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrComparison(this);
    }

    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
    }

}
public sealed class ANotComparison : PComparison
{
    private TNot _not_;

    public ANotComparison ()
    {
    }

    public ANotComparison (
            TNot _not_
    )
    {
        SetNot (_not_);
    }

    public override Object Clone()
    {
        return new ANotComparison (
            (TNot)CloneNode (_not_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotComparison(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
    }

}
public sealed class AMathAssignments : PAssignments
{
    private TVariable _variable_;
    private TAssignment _assignment_;
    private PMath _math_;

    public AMathAssignments ()
    {
    }

    public AMathAssignments (
            TVariable _variable_,
            TAssignment _assignment_,
            PMath _math_
    )
    {
        SetVariable (_variable_);
        SetAssignment (_assignment_);
        SetMath (_math_);
    }

    public override Object Clone()
    {
        return new AMathAssignments (
            (TVariable)CloneNode (_variable_),
            (TAssignment)CloneNode (_assignment_),
            (PMath)CloneNode (_math_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathAssignments(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public PMath GetMath ()
    {
        return _math_;
    }

    public void SetMath (PMath node)
    {
        if(_math_ != null)
        {
            _math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_assignment_)
            + ToString (_math_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _math_ == child )
        {
            _math_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _math_ == oldChild )
        {
            SetMath ((PMath) newChild);
            return;
        }
    }

}
public sealed class AStringAssignments : PAssignments
{
    private TVariable _variable_;
    private TAssignment _assignment_;
    private TString _string_;

    public AStringAssignments ()
    {
    }

    public AStringAssignments (
            TVariable _variable_,
            TAssignment _assignment_,
            TString _string_
    )
    {
        SetVariable (_variable_);
        SetAssignment (_assignment_);
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringAssignments (
            (TVariable)CloneNode (_variable_),
            (TAssignment)CloneNode (_assignment_),
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringAssignments(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_assignment_)
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AMathArrayAssignments : PAssignments
{
    private TVariable _variable_;
    private TStartBracket _start_bracket_;
    private PMath _math1_;
    private TEndBracket _end_bracket_;
    private TAssignment _assignment_;
    private PMath _math2_;

    public AMathArrayAssignments ()
    {
    }

    public AMathArrayAssignments (
            TVariable _variable_,
            TStartBracket _start_bracket_,
            PMath _math1_,
            TEndBracket _end_bracket_,
            TAssignment _assignment_,
            PMath _math2_
    )
    {
        SetVariable (_variable_);
        SetStartBracket (_start_bracket_);
        SetMath1 (_math1_);
        SetEndBracket (_end_bracket_);
        SetAssignment (_assignment_);
        SetMath2 (_math2_);
    }

    public override Object Clone()
    {
        return new AMathArrayAssignments (
            (TVariable)CloneNode (_variable_),
            (TStartBracket)CloneNode (_start_bracket_),
            (PMath)CloneNode (_math1_),
            (TEndBracket)CloneNode (_end_bracket_),
            (TAssignment)CloneNode (_assignment_),
            (PMath)CloneNode (_math2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathArrayAssignments(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TStartBracket GetStartBracket ()
    {
        return _start_bracket_;
    }

    public void SetStartBracket (TStartBracket node)
    {
        if(_start_bracket_ != null)
        {
            _start_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_bracket_ = node;
    }
    public PMath GetMath1 ()
    {
        return _math1_;
    }

    public void SetMath1 (PMath node)
    {
        if(_math1_ != null)
        {
            _math1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math1_ = node;
    }
    public TEndBracket GetEndBracket ()
    {
        return _end_bracket_;
    }

    public void SetEndBracket (TEndBracket node)
    {
        if(_end_bracket_ != null)
        {
            _end_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_bracket_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public PMath GetMath2 ()
    {
        return _math2_;
    }

    public void SetMath2 (PMath node)
    {
        if(_math2_ != null)
        {
            _math2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_start_bracket_)
            + ToString (_math1_)
            + ToString (_end_bracket_)
            + ToString (_assignment_)
            + ToString (_math2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _start_bracket_ == child )
        {
            _start_bracket_ = null;
            return;
        }
        if ( _math1_ == child )
        {
            _math1_ = null;
            return;
        }
        if ( _end_bracket_ == child )
        {
            _end_bracket_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _math2_ == child )
        {
            _math2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _start_bracket_ == oldChild )
        {
            SetStartBracket ((TStartBracket) newChild);
            return;
        }
        if ( _math1_ == oldChild )
        {
            SetMath1 ((PMath) newChild);
            return;
        }
        if ( _end_bracket_ == oldChild )
        {
            SetEndBracket ((TEndBracket) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _math2_ == oldChild )
        {
            SetMath2 ((PMath) newChild);
            return;
        }
    }

}
public sealed class AStringArrayAssignments : PAssignments
{
    private TVariable _variable_;
    private TStartBracket _start_bracket_;
    private PMath _math_;
    private TEndBracket _end_bracket_;
    private TAssignment _assignment_;
    private TString _string_;

    public AStringArrayAssignments ()
    {
    }

    public AStringArrayAssignments (
            TVariable _variable_,
            TStartBracket _start_bracket_,
            PMath _math_,
            TEndBracket _end_bracket_,
            TAssignment _assignment_,
            TString _string_
    )
    {
        SetVariable (_variable_);
        SetStartBracket (_start_bracket_);
        SetMath (_math_);
        SetEndBracket (_end_bracket_);
        SetAssignment (_assignment_);
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringArrayAssignments (
            (TVariable)CloneNode (_variable_),
            (TStartBracket)CloneNode (_start_bracket_),
            (PMath)CloneNode (_math_),
            (TEndBracket)CloneNode (_end_bracket_),
            (TAssignment)CloneNode (_assignment_),
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringArrayAssignments(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TStartBracket GetStartBracket ()
    {
        return _start_bracket_;
    }

    public void SetStartBracket (TStartBracket node)
    {
        if(_start_bracket_ != null)
        {
            _start_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_bracket_ = node;
    }
    public PMath GetMath ()
    {
        return _math_;
    }

    public void SetMath (PMath node)
    {
        if(_math_ != null)
        {
            _math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_ = node;
    }
    public TEndBracket GetEndBracket ()
    {
        return _end_bracket_;
    }

    public void SetEndBracket (TEndBracket node)
    {
        if(_end_bracket_ != null)
        {
            _end_bracket_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_bracket_ = node;
    }
    public TAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (TAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_start_bracket_)
            + ToString (_math_)
            + ToString (_end_bracket_)
            + ToString (_assignment_)
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _start_bracket_ == child )
        {
            _start_bracket_ = null;
            return;
        }
        if ( _math_ == child )
        {
            _math_ = null;
            return;
        }
        if ( _end_bracket_ == child )
        {
            _end_bracket_ = null;
            return;
        }
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _start_bracket_ == oldChild )
        {
            SetStartBracket ((TStartBracket) newChild);
            return;
        }
        if ( _math_ == oldChild )
        {
            SetMath ((PMath) newChild);
            return;
        }
        if ( _end_bracket_ == oldChild )
        {
            SetEndBracket ((TEndBracket) newChild);
            return;
        }
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((TAssignment) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AMethodCall : PMethodCall
{
    private TVariable _variable_;
    private TStartParentheses _start_parentheses_;
    private PParam _param_;
    private TEndParentheses _end_parentheses_;

    public AMethodCall ()
    {
    }

    public AMethodCall (
            TVariable _variable_,
            TStartParentheses _start_parentheses_,
            PParam _param_,
            TEndParentheses _end_parentheses_
    )
    {
        SetVariable (_variable_);
        SetStartParentheses (_start_parentheses_);
        SetParam (_param_);
        SetEndParentheses (_end_parentheses_);
    }

    public override Object Clone()
    {
        return new AMethodCall (
            (TVariable)CloneNode (_variable_),
            (TStartParentheses)CloneNode (_start_parentheses_),
            (PParam)CloneNode (_param_),
            (TEndParentheses)CloneNode (_end_parentheses_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMethodCall(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public TStartParentheses GetStartParentheses ()
    {
        return _start_parentheses_;
    }

    public void SetStartParentheses (TStartParentheses node)
    {
        if(_start_parentheses_ != null)
        {
            _start_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_parentheses_ = node;
    }
    public PParam GetParam ()
    {
        return _param_;
    }

    public void SetParam (PParam node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }
    public TEndParentheses GetEndParentheses ()
    {
        return _end_parentheses_;
    }

    public void SetEndParentheses (TEndParentheses node)
    {
        if(_end_parentheses_ != null)
        {
            _end_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_parentheses_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_start_parentheses_)
            + ToString (_param_)
            + ToString (_end_parentheses_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _start_parentheses_ == child )
        {
            _start_parentheses_ = null;
            return;
        }
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
        if ( _end_parentheses_ == child )
        {
            _end_parentheses_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _start_parentheses_ == oldChild )
        {
            SetStartParentheses ((TStartParentheses) newChild);
            return;
        }
        if ( _param_ == oldChild )
        {
            SetParam ((PParam) newChild);
            return;
        }
        if ( _end_parentheses_ == oldChild )
        {
            SetEndParentheses ((TEndParentheses) newChild);
            return;
        }
    }

}
public sealed class AVarParam : PParam
{
    private TVariable _variable_;
    private PMoreParam _more_param_;

    public AVarParam ()
    {
    }

    public AVarParam (
            TVariable _variable_,
            PMoreParam _more_param_
    )
    {
        SetVariable (_variable_);
        SetMoreParam (_more_param_);
    }

    public override Object Clone()
    {
        return new AVarParam (
            (TVariable)CloneNode (_variable_),
            (PMoreParam)CloneNode (_more_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVarParam(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }
    public PMoreParam GetMoreParam ()
    {
        return _more_param_;
    }

    public void SetMoreParam (PMoreParam node)
    {
        if(_more_param_ != null)
        {
            _more_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _more_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
            + ToString (_more_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
        if ( _more_param_ == child )
        {
            _more_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
        if ( _more_param_ == oldChild )
        {
            SetMoreParam ((PMoreParam) newChild);
            return;
        }
    }

}
public sealed class AStringParam : PParam
{
    private TString _string_;
    private PMoreParam _more_param_;

    public AStringParam ()
    {
    }

    public AStringParam (
            TString _string_,
            PMoreParam _more_param_
    )
    {
        SetString (_string_);
        SetMoreParam (_more_param_);
    }

    public override Object Clone()
    {
        return new AStringParam (
            (TString)CloneNode (_string_),
            (PMoreParam)CloneNode (_more_param_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringParam(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }
    public PMoreParam GetMoreParam ()
    {
        return _more_param_;
    }

    public void SetMoreParam (PMoreParam node)
    {
        if(_more_param_ != null)
        {
            _more_param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _more_param_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
            + ToString (_more_param_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
        if ( _more_param_ == child )
        {
            _more_param_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
        if ( _more_param_ == oldChild )
        {
            SetMoreParam ((PMoreParam) newChild);
            return;
        }
    }

}
public sealed class ANoneParam : PParam
{


    public ANoneParam (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneParam (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneParam(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AOthersMoreParam : PMoreParam
{
    private TComma _comma_;
    private TVariable _variable_;

    public AOthersMoreParam ()
    {
    }

    public AOthersMoreParam (
            TComma _comma_,
            TVariable _variable_
    )
    {
        SetComma (_comma_);
        SetVariable (_variable_);
    }

    public override Object Clone()
    {
        return new AOthersMoreParam (
            (TComma)CloneNode (_comma_),
            (TVariable)CloneNode (_variable_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOthersMoreParam(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_variable_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
    }

}
public sealed class AStringMoreParam : PMoreParam
{
    private TComma _comma_;
    private TString _string_;

    public AStringMoreParam ()
    {
    }

    public AStringMoreParam (
            TComma _comma_,
            TString _string_
    )
    {
        SetComma (_comma_);
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringMoreParam (
            (TComma)CloneNode (_comma_),
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringMoreParam(this);
    }

    public TComma GetComma ()
    {
        return _comma_;
    }

    public void SetComma (TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comma_ = node;
    }
    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comma_)
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comma_ == child )
        {
            _comma_ = null;
            return;
        }
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comma_ == oldChild )
        {
            SetComma ((TComma) newChild);
            return;
        }
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class ADoneMoreParam : PMoreParam
{


    public ADoneMoreParam (
    )
    {
    }

    public override Object Clone()
    {
        return new ADoneMoreParam (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADoneMoreParam(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAddMath : PMath
{
    private PMath _math_;
    private TPlus _plus_;
    private PMultiDivide _multi_divide_;

    public AAddMath ()
    {
    }

    public AAddMath (
            PMath _math_,
            TPlus _plus_,
            PMultiDivide _multi_divide_
    )
    {
        SetMath (_math_);
        SetPlus (_plus_);
        SetMultiDivide (_multi_divide_);
    }

    public override Object Clone()
    {
        return new AAddMath (
            (PMath)CloneNode (_math_),
            (TPlus)CloneNode (_plus_),
            (PMultiDivide)CloneNode (_multi_divide_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddMath(this);
    }

    public PMath GetMath ()
    {
        return _math_;
    }

    public void SetMath (PMath node)
    {
        if(_math_ != null)
        {
            _math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PMultiDivide GetMultiDivide ()
    {
        return _multi_divide_;
    }

    public void SetMultiDivide (PMultiDivide node)
    {
        if(_multi_divide_ != null)
        {
            _multi_divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_divide_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_)
            + ToString (_plus_)
            + ToString (_multi_divide_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_ == child )
        {
            _math_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _multi_divide_ == child )
        {
            _multi_divide_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_ == oldChild )
        {
            SetMath ((PMath) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _multi_divide_ == oldChild )
        {
            SetMultiDivide ((PMultiDivide) newChild);
            return;
        }
    }

}
public sealed class ASubMath : PMath
{
    private PMath _math_;
    private TMinus _minus_;
    private PMultiDivide _multi_divide_;

    public ASubMath ()
    {
    }

    public ASubMath (
            PMath _math_,
            TMinus _minus_,
            PMultiDivide _multi_divide_
    )
    {
        SetMath (_math_);
        SetMinus (_minus_);
        SetMultiDivide (_multi_divide_);
    }

    public override Object Clone()
    {
        return new ASubMath (
            (PMath)CloneNode (_math_),
            (TMinus)CloneNode (_minus_),
            (PMultiDivide)CloneNode (_multi_divide_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubMath(this);
    }

    public PMath GetMath ()
    {
        return _math_;
    }

    public void SetMath (PMath node)
    {
        if(_math_ != null)
        {
            _math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PMultiDivide GetMultiDivide ()
    {
        return _multi_divide_;
    }

    public void SetMultiDivide (PMultiDivide node)
    {
        if(_multi_divide_ != null)
        {
            _multi_divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_divide_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_math_)
            + ToString (_minus_)
            + ToString (_multi_divide_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _math_ == child )
        {
            _math_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _multi_divide_ == child )
        {
            _multi_divide_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _math_ == oldChild )
        {
            SetMath ((PMath) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _multi_divide_ == oldChild )
        {
            SetMultiDivide ((PMultiDivide) newChild);
            return;
        }
    }

}
public sealed class ANoneMath : PMath
{
    private PMultiDivide _multi_divide_;

    public ANoneMath ()
    {
    }

    public ANoneMath (
            PMultiDivide _multi_divide_
    )
    {
        SetMultiDivide (_multi_divide_);
    }

    public override Object Clone()
    {
        return new ANoneMath (
            (PMultiDivide)CloneNode (_multi_divide_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneMath(this);
    }

    public PMultiDivide GetMultiDivide ()
    {
        return _multi_divide_;
    }

    public void SetMultiDivide (PMultiDivide node)
    {
        if(_multi_divide_ != null)
        {
            _multi_divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_divide_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_divide_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_divide_ == child )
        {
            _multi_divide_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_divide_ == oldChild )
        {
            SetMultiDivide ((PMultiDivide) newChild);
            return;
        }
    }

}
public sealed class AMultiMultiDivide : PMultiDivide
{
    private PMultiDivide _multi_divide_;
    private TMultiplication _multiplication_;
    private PParentheses _parentheses_;

    public AMultiMultiDivide ()
    {
    }

    public AMultiMultiDivide (
            PMultiDivide _multi_divide_,
            TMultiplication _multiplication_,
            PParentheses _parentheses_
    )
    {
        SetMultiDivide (_multi_divide_);
        SetMultiplication (_multiplication_);
        SetParentheses (_parentheses_);
    }

    public override Object Clone()
    {
        return new AMultiMultiDivide (
            (PMultiDivide)CloneNode (_multi_divide_),
            (TMultiplication)CloneNode (_multiplication_),
            (PParentheses)CloneNode (_parentheses_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiMultiDivide(this);
    }

    public PMultiDivide GetMultiDivide ()
    {
        return _multi_divide_;
    }

    public void SetMultiDivide (PMultiDivide node)
    {
        if(_multi_divide_ != null)
        {
            _multi_divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_divide_ = node;
    }
    public TMultiplication GetMultiplication ()
    {
        return _multiplication_;
    }

    public void SetMultiplication (TMultiplication node)
    {
        if(_multiplication_ != null)
        {
            _multiplication_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multiplication_ = node;
    }
    public PParentheses GetParentheses ()
    {
        return _parentheses_;
    }

    public void SetParentheses (PParentheses node)
    {
        if(_parentheses_ != null)
        {
            _parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parentheses_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_divide_)
            + ToString (_multiplication_)
            + ToString (_parentheses_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_divide_ == child )
        {
            _multi_divide_ = null;
            return;
        }
        if ( _multiplication_ == child )
        {
            _multiplication_ = null;
            return;
        }
        if ( _parentheses_ == child )
        {
            _parentheses_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_divide_ == oldChild )
        {
            SetMultiDivide ((PMultiDivide) newChild);
            return;
        }
        if ( _multiplication_ == oldChild )
        {
            SetMultiplication ((TMultiplication) newChild);
            return;
        }
        if ( _parentheses_ == oldChild )
        {
            SetParentheses ((PParentheses) newChild);
            return;
        }
    }

}
public sealed class ADivideMultiDivide : PMultiDivide
{
    private PMultiDivide _multi_divide_;
    private TDivision _division_;
    private PParentheses _parentheses_;

    public ADivideMultiDivide ()
    {
    }

    public ADivideMultiDivide (
            PMultiDivide _multi_divide_,
            TDivision _division_,
            PParentheses _parentheses_
    )
    {
        SetMultiDivide (_multi_divide_);
        SetDivision (_division_);
        SetParentheses (_parentheses_);
    }

    public override Object Clone()
    {
        return new ADivideMultiDivide (
            (PMultiDivide)CloneNode (_multi_divide_),
            (TDivision)CloneNode (_division_),
            (PParentheses)CloneNode (_parentheses_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideMultiDivide(this);
    }

    public PMultiDivide GetMultiDivide ()
    {
        return _multi_divide_;
    }

    public void SetMultiDivide (PMultiDivide node)
    {
        if(_multi_divide_ != null)
        {
            _multi_divide_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _multi_divide_ = node;
    }
    public TDivision GetDivision ()
    {
        return _division_;
    }

    public void SetDivision (TDivision node)
    {
        if(_division_ != null)
        {
            _division_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _division_ = node;
    }
    public PParentheses GetParentheses ()
    {
        return _parentheses_;
    }

    public void SetParentheses (PParentheses node)
    {
        if(_parentheses_ != null)
        {
            _parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parentheses_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_multi_divide_)
            + ToString (_division_)
            + ToString (_parentheses_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _multi_divide_ == child )
        {
            _multi_divide_ = null;
            return;
        }
        if ( _division_ == child )
        {
            _division_ = null;
            return;
        }
        if ( _parentheses_ == child )
        {
            _parentheses_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _multi_divide_ == oldChild )
        {
            SetMultiDivide ((PMultiDivide) newChild);
            return;
        }
        if ( _division_ == oldChild )
        {
            SetDivision ((TDivision) newChild);
            return;
        }
        if ( _parentheses_ == oldChild )
        {
            SetParentheses ((PParentheses) newChild);
            return;
        }
    }

}
public sealed class ANoneMultiDivide : PMultiDivide
{
    private PParentheses _parentheses_;

    public ANoneMultiDivide ()
    {
    }

    public ANoneMultiDivide (
            PParentheses _parentheses_
    )
    {
        SetParentheses (_parentheses_);
    }

    public override Object Clone()
    {
        return new ANoneMultiDivide (
            (PParentheses)CloneNode (_parentheses_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneMultiDivide(this);
    }

    public PParentheses GetParentheses ()
    {
        return _parentheses_;
    }

    public void SetParentheses (PParentheses node)
    {
        if(_parentheses_ != null)
        {
            _parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parentheses_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parentheses_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parentheses_ == child )
        {
            _parentheses_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parentheses_ == oldChild )
        {
            SetParentheses ((PParentheses) newChild);
            return;
        }
    }

}
public sealed class ASomeParentheses : PParentheses
{
    private TStartParentheses _start_parentheses_;
    private PMath _math_;
    private TEndParentheses _end_parentheses_;

    public ASomeParentheses ()
    {
    }

    public ASomeParentheses (
            TStartParentheses _start_parentheses_,
            PMath _math_,
            TEndParentheses _end_parentheses_
    )
    {
        SetStartParentheses (_start_parentheses_);
        SetMath (_math_);
        SetEndParentheses (_end_parentheses_);
    }

    public override Object Clone()
    {
        return new ASomeParentheses (
            (TStartParentheses)CloneNode (_start_parentheses_),
            (PMath)CloneNode (_math_),
            (TEndParentheses)CloneNode (_end_parentheses_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASomeParentheses(this);
    }

    public TStartParentheses GetStartParentheses ()
    {
        return _start_parentheses_;
    }

    public void SetStartParentheses (TStartParentheses node)
    {
        if(_start_parentheses_ != null)
        {
            _start_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _start_parentheses_ = node;
    }
    public PMath GetMath ()
    {
        return _math_;
    }

    public void SetMath (PMath node)
    {
        if(_math_ != null)
        {
            _math_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _math_ = node;
    }
    public TEndParentheses GetEndParentheses ()
    {
        return _end_parentheses_;
    }

    public void SetEndParentheses (TEndParentheses node)
    {
        if(_end_parentheses_ != null)
        {
            _end_parentheses_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _end_parentheses_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_start_parentheses_)
            + ToString (_math_)
            + ToString (_end_parentheses_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _start_parentheses_ == child )
        {
            _start_parentheses_ = null;
            return;
        }
        if ( _math_ == child )
        {
            _math_ = null;
            return;
        }
        if ( _end_parentheses_ == child )
        {
            _end_parentheses_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _start_parentheses_ == oldChild )
        {
            SetStartParentheses ((TStartParentheses) newChild);
            return;
        }
        if ( _math_ == oldChild )
        {
            SetMath ((PMath) newChild);
            return;
        }
        if ( _end_parentheses_ == oldChild )
        {
            SetEndParentheses ((TEndParentheses) newChild);
            return;
        }
    }

}
public sealed class AVariableParentheses : PParentheses
{
    private TVariable _variable_;

    public AVariableParentheses ()
    {
    }

    public AVariableParentheses (
            TVariable _variable_
    )
    {
        SetVariable (_variable_);
    }

    public override Object Clone()
    {
        return new AVariableParentheses (
            (TVariable)CloneNode (_variable_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableParentheses(this);
    }

    public TVariable GetVariable ()
    {
        return _variable_;
    }

    public void SetVariable (TVariable node)
    {
        if(_variable_ != null)
        {
            _variable_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _variable_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_variable_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _variable_ == child )
        {
            _variable_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _variable_ == oldChild )
        {
            SetVariable ((TVariable) newChild);
            return;
        }
    }

}
public sealed class AIntegerParentheses : PParentheses
{
    private TInteger _integer_;

    public AIntegerParentheses ()
    {
    }

    public AIntegerParentheses (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntegerParentheses (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerParentheses(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatParentheses : PParentheses
{
    private TFloat _float_;

    public AFloatParentheses ()
    {
    }

    public AFloatParentheses (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatParentheses (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatParentheses(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
