/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using comp5210.node;
using comp5210.lexer;
using comp5210.analysis;

namespace comp5210.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTBang(TBang node)
    {
        index = 0;
    }

    public override void CaseTClass(TClass node)
    {
        index = 1;
    }

    public override void CaseTPublic(TPublic node)
    {
        index = 2;
    }

    public override void CaseTPrivate(TPrivate node)
    {
        index = 3;
    }

    public override void CaseTMain(TMain node)
    {
        index = 4;
    }

    public override void CaseTReturn(TReturn node)
    {
        index = 5;
    }

    public override void CaseTComma(TComma node)
    {
        index = 6;
    }

    public override void CaseTLoop(TLoop node)
    {
        index = 7;
    }

    public override void CaseTIf(TIf node)
    {
        index = 8;
    }

    public override void CaseTElse(TElse node)
    {
        index = 9;
    }

    public override void CaseTAssignment(TAssignment node)
    {
        index = 10;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 11;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 12;
    }

    public override void CaseTMultiplication(TMultiplication node)
    {
        index = 13;
    }

    public override void CaseTDivision(TDivision node)
    {
        index = 14;
    }

    public override void CaseTEqual(TEqual node)
    {
        index = 15;
    }

    public override void CaseTLess(TLess node)
    {
        index = 16;
    }

    public override void CaseTGreater(TGreater node)
    {
        index = 17;
    }

    public override void CaseTLessEqual(TLessEqual node)
    {
        index = 18;
    }

    public override void CaseTGreaterEqual(TGreaterEqual node)
    {
        index = 19;
    }

    public override void CaseTAtLeast(TAtLeast node)
    {
        index = 20;
    }

    public override void CaseTStartParentheses(TStartParentheses node)
    {
        index = 21;
    }

    public override void CaseTEndParentheses(TEndParentheses node)
    {
        index = 22;
    }

    public override void CaseTStartBracket(TStartBracket node)
    {
        index = 23;
    }

    public override void CaseTEndBracket(TEndBracket node)
    {
        index = 24;
    }

    public override void CaseTStartBrace(TStartBrace node)
    {
        index = 25;
    }

    public override void CaseTEndBrace(TEndBrace node)
    {
        index = 26;
    }

    public override void CaseTEnd(TEnd node)
    {
        index = 27;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 28;
    }

    public override void CaseTOr(TOr node)
    {
        index = 29;
    }

    public override void CaseTNot(TNot node)
    {
        index = 30;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 31;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 32;
    }

    public override void CaseTVariable(TVariable node)
    {
        index = 33;
    }

    public override void CaseTString(TString node)
    {
        index = 34;
    }

    public override void CaseEOF(EOF node)
    {
        index = 35;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(1), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(2), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(3), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(3), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(4), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(4), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(5), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(6), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(6), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(7), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(7), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(7), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(7), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(7), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(7), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(8), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(9), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(9), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(10), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(11), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(11), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(11), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(11), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(11), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(11), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(11), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(11), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(11), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(12), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(12), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(12), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(12), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(13), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(14), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(14), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(14), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(15), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(15), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(15), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(16), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(16), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(16), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(17), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(17), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(17), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(18), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(18), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(18), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(18), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PConstants pconstantsNode2 = (PConstants)nodeArrayList1[0];
        PMethods pmethodsNode3 = (PMethods)nodeArrayList2[0];
        PMainProgram pmainprogramNode4 = (PMainProgram)nodeArrayList3[0];
        AProgram pprogramNode1 = new AProgram (
              pconstantsNode2,
              pmethodsNode3,
              pmainprogramNode4
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TAssignment tassignmentNode4 = (TAssignment)nodeArrayList3[0];
        TInteger tintegerNode5 = (TInteger)nodeArrayList4[0];
        TEnd tendNode6 = (TEnd)nodeArrayList5[0];
        PConstants pconstantsNode7 = (PConstants)nodeArrayList6[0];
        AIntegerConstants pconstantsNode1 = new AIntegerConstants (
              tvariableNode2,
              tvariableNode3,
              tassignmentNode4,
              tintegerNode5,
              tendNode6,
              pconstantsNode7
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TAssignment tassignmentNode4 = (TAssignment)nodeArrayList3[0];
        TFloat tfloatNode5 = (TFloat)nodeArrayList4[0];
        TEnd tendNode6 = (TEnd)nodeArrayList5[0];
        PConstants pconstantsNode7 = (PConstants)nodeArrayList6[0];
        AFloatConstants pconstantsNode1 = new AFloatConstants (
              tvariableNode2,
              tvariableNode3,
              tassignmentNode4,
              tfloatNode5,
              tendNode6,
              pconstantsNode7
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ANoneConstants pconstantsNode1 = new ANoneConstants (
        );
        nodeList.Add(pconstantsNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TPublic tpublicNode2 = (TPublic)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TStartParentheses tstartparenthesesNode4 = (TStartParentheses)nodeArrayList3[0];
        PInitParam pinitparamNode5 = (PInitParam)nodeArrayList4[0];
        TEndParentheses tendparenthesesNode6 = (TEndParentheses)nodeArrayList5[0];
        TStartBrace tstartbraceNode7 = (TStartBrace)nodeArrayList6[0];
        PStuff pstuffNode8 = (PStuff)nodeArrayList7[0];
        TEndBrace tendbraceNode9 = (TEndBrace)nodeArrayList8[0];
        PMethods pmethodsNode10 = (PMethods)nodeArrayList9[0];
        ASomeMethods pmethodsNode1 = new ASomeMethods (
              tpublicNode2,
              tvariableNode3,
              tstartparenthesesNode4,
              pinitparamNode5,
              tendparenthesesNode6,
              tstartbraceNode7,
              pstuffNode8,
              tendbraceNode9,
              pmethodsNode10
        );
        nodeList.Add(pmethodsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ANoneMethods pmethodsNode1 = new ANoneMethods (
        );
        nodeList.Add(pmethodsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        PSecondParam psecondparamNode4 = (PSecondParam)nodeArrayList3[0];
        ASomeInitParam pinitparamNode1 = new ASomeInitParam (
              tvariableNode2,
              tvariableNode3,
              psecondparamNode4
        );
        nodeList.Add(pinitparamNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ANoneInitParam pinitparamNode1 = new ANoneInitParam (
        );
        nodeList.Add(pinitparamNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TComma tcommaNode2 = (TComma)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TVariable tvariableNode4 = (TVariable)nodeArrayList3[0];
        PSecondParam psecondparamNode5 = (PSecondParam)nodeArrayList4[0];
        AOthersSecondParam psecondparamNode1 = new AOthersSecondParam (
              tcommaNode2,
              tvariableNode3,
              tvariableNode4,
              psecondparamNode5
        );
        nodeList.Add(psecondparamNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ADoneSecondParam psecondparamNode1 = new ADoneSecondParam (
        );
        nodeList.Add(psecondparamNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TStartBrace tstartbraceNode3 = (TStartBrace)nodeArrayList2[0];
        PStuff pstuffNode4 = (PStuff)nodeArrayList3[0];
        TEndBrace tendbraceNode5 = (TEndBrace)nodeArrayList4[0];
        AProgramMainProgram pmainprogramNode1 = new AProgramMainProgram (
              tmainNode2,
              tstartbraceNode3,
              pstuffNode4,
              tendbraceNode5
        );
        nodeList.Add(pmainprogramNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        AVarDecls pdeclsNode1 = new AVarDecls (
              tvariableNode2,
              tvariableNode3
        );
        nodeList.Add(pdeclsNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        TStartBracket tstartbracketNode4 = (TStartBracket)nodeArrayList3[0];
        TInteger tintegerNode5 = (TInteger)nodeArrayList4[0];
        TEndBracket tendbracketNode6 = (TEndBracket)nodeArrayList5[0];
        AArrayDecls pdeclsNode1 = new AArrayDecls (
              tvariableNode2,
              tvariableNode3,
              tstartbracketNode4,
              tintegerNode5,
              tendbracketNode6
        );
        nodeList.Add(pdeclsNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDecls pdeclsNode2 = (PDecls)nodeArrayList1[0];
        TEnd tendNode3 = (TEnd)nodeArrayList2[0];
        PStuff pstuffNode4 = (PStuff)nodeArrayList3[0];
        ADeclsStuff pstuffNode1 = new ADeclsStuff (
              pdeclsNode2,
              tendNode3,
              pstuffNode4
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLoops ploopsNode2 = (PLoops)nodeArrayList1[0];
        PStuff pstuffNode3 = (PStuff)nodeArrayList2[0];
        ALoopStuff pstuffNode1 = new ALoopStuff (
              ploopsNode2,
              pstuffNode3
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfElse pifelseNode2 = (PIfElse)nodeArrayList1[0];
        PStuff pstuffNode3 = (PStuff)nodeArrayList2[0];
        AIfElseStuff pstuffNode1 = new AIfElseStuff (
              pifelseNode2,
              pstuffNode3
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignments passignmentsNode2 = (PAssignments)nodeArrayList1[0];
        TEnd tendNode3 = (TEnd)nodeArrayList2[0];
        PStuff pstuffNode4 = (PStuff)nodeArrayList3[0];
        AAssignmentStuff pstuffNode1 = new AAssignmentStuff (
              passignmentsNode2,
              tendNode3,
              pstuffNode4
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMethodCall pmethodcallNode2 = (PMethodCall)nodeArrayList1[0];
        TEnd tendNode3 = (TEnd)nodeArrayList2[0];
        PStuff pstuffNode4 = (PStuff)nodeArrayList3[0];
        AMethodCallStuff pstuffNode1 = new AMethodCallStuff (
              pmethodcallNode2,
              tendNode3,
              pstuffNode4
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ANoneStuff pstuffNode1 = new ANoneStuff (
        );
        nodeList.Add(pstuffNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLoop tloopNode2 = (TLoop)nodeArrayList1[0];
        PCircumstance pcircumstanceNode3 = (PCircumstance)nodeArrayList2[0];
        TStartBrace tstartbraceNode4 = (TStartBrace)nodeArrayList3[0];
        PStuff pstuffNode5 = (PStuff)nodeArrayList4[0];
        TEndBrace tendbraceNode6 = (TEndBrace)nodeArrayList5[0];
        ALoops ploopsNode1 = new ALoops (
              tloopNode2,
              pcircumstanceNode3,
              tstartbraceNode4,
              pstuffNode5,
              tendbraceNode6
        );
        nodeList.Add(ploopsNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TStartParentheses tstartparenthesesNode2 = (TStartParentheses)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        PComparison pcomparisonNode4 = (PComparison)nodeArrayList3[0];
        PMath pmathNode5 = (PMath)nodeArrayList4[0];
        TEndParentheses tendparenthesesNode6 = (TEndParentheses)nodeArrayList5[0];
        AVariableMathCircumstance pcircumstanceNode1 = new AVariableMathCircumstance (
              tstartparenthesesNode2,
              tvariableNode3,
              pcomparisonNode4,
              pmathNode5,
              tendparenthesesNode6
        );
        nodeList.Add(pcircumstanceNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TStartParentheses tstartparenthesesNode2 = (TStartParentheses)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        PComparison pcomparisonNode4 = (PComparison)nodeArrayList3[0];
        TString tstringNode5 = (TString)nodeArrayList4[0];
        TEndParentheses tendparenthesesNode6 = (TEndParentheses)nodeArrayList5[0];
        AVarStringCircumstance pcircumstanceNode1 = new AVarStringCircumstance (
              tstartparenthesesNode2,
              tvariableNode3,
              pcomparisonNode4,
              tstringNode5,
              tendparenthesesNode6
        );
        nodeList.Add(pcircumstanceNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList9 = (ArrayList) Pop();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        PCircumstance pcircumstanceNode3 = (PCircumstance)nodeArrayList2[0];
        TStartBrace tstartbraceNode4 = (TStartBrace)nodeArrayList3[0];
        PStuff pstuffNode5 = (PStuff)nodeArrayList4[0];
        TEndBrace tendbraceNode6 = (TEndBrace)nodeArrayList5[0];
        TElse telseNode7 = (TElse)nodeArrayList6[0];
        TStartBrace tstartbraceNode8 = (TStartBrace)nodeArrayList7[0];
        PStuff pstuffNode9 = (PStuff)nodeArrayList8[0];
        TEndBrace tendbraceNode10 = (TEndBrace)nodeArrayList9[0];
        AIfElse pifelseNode1 = new AIfElse (
              tifNode2,
              pcircumstanceNode3,
              tstartbraceNode4,
              pstuffNode5,
              tendbraceNode6,
              telseNode7,
              tstartbraceNode8,
              pstuffNode9,
              tendbraceNode10
        );
        nodeList.Add(pifelseNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TEqual tequalNode2 = (TEqual)nodeArrayList1[0];
        AEqualComparison pcomparisonNode1 = new AEqualComparison (
              tequalNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLess tlessNode2 = (TLess)nodeArrayList1[0];
        ALessComparison pcomparisonNode1 = new ALessComparison (
              tlessNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGreater tgreaterNode2 = (TGreater)nodeArrayList1[0];
        AGreaterComparison pcomparisonNode1 = new AGreaterComparison (
              tgreaterNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TAtLeast tatleastNode2 = (TAtLeast)nodeArrayList1[0];
        AAtLeastComparison pcomparisonNode1 = new AAtLeastComparison (
              tatleastNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGreaterEqual tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1[0];
        AGreaterEqualComparison pcomparisonNode1 = new AGreaterEqualComparison (
              tgreaterequalNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLessEqual tlessequalNode2 = (TLessEqual)nodeArrayList1[0];
        ALessEqualComparison pcomparisonNode1 = new ALessEqualComparison (
              tlessequalNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TAnd tandNode2 = (TAnd)nodeArrayList1[0];
        AAndComparison pcomparisonNode1 = new AAndComparison (
              tandNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOr torNode2 = (TOr)nodeArrayList1[0];
        AOrComparison pcomparisonNode1 = new AOrComparison (
              torNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNot tnotNode2 = (TNot)nodeArrayList1[0];
        ANotComparison pcomparisonNode1 = new ANotComparison (
              tnotNode2
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        PMath pmathNode4 = (PMath)nodeArrayList3[0];
        AMathAssignments passignmentsNode1 = new AMathAssignments (
              tvariableNode2,
              tassignmentNode3,
              pmathNode4
        );
        nodeList.Add(passignmentsNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TAssignment tassignmentNode3 = (TAssignment)nodeArrayList2[0];
        TString tstringNode4 = (TString)nodeArrayList3[0];
        AStringAssignments passignmentsNode1 = new AStringAssignments (
              tvariableNode2,
              tassignmentNode3,
              tstringNode4
        );
        nodeList.Add(passignmentsNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TStartBracket tstartbracketNode3 = (TStartBracket)nodeArrayList2[0];
        PMath pmathNode4 = (PMath)nodeArrayList3[0];
        TEndBracket tendbracketNode5 = (TEndBracket)nodeArrayList4[0];
        TAssignment tassignmentNode6 = (TAssignment)nodeArrayList5[0];
        PMath pmathNode7 = (PMath)nodeArrayList6[0];
        AMathArrayAssignments passignmentsNode1 = new AMathArrayAssignments (
              tvariableNode2,
              tstartbracketNode3,
              pmathNode4,
              tendbracketNode5,
              tassignmentNode6,
              pmathNode7
        );
        nodeList.Add(passignmentsNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TStartBracket tstartbracketNode3 = (TStartBracket)nodeArrayList2[0];
        PMath pmathNode4 = (PMath)nodeArrayList3[0];
        TEndBracket tendbracketNode5 = (TEndBracket)nodeArrayList4[0];
        TAssignment tassignmentNode6 = (TAssignment)nodeArrayList5[0];
        TString tstringNode7 = (TString)nodeArrayList6[0];
        AStringArrayAssignments passignmentsNode1 = new AStringArrayAssignments (
              tvariableNode2,
              tstartbracketNode3,
              pmathNode4,
              tendbracketNode5,
              tassignmentNode6,
              tstringNode7
        );
        nodeList.Add(passignmentsNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        TStartParentheses tstartparenthesesNode3 = (TStartParentheses)nodeArrayList2[0];
        PParam pparamNode4 = (PParam)nodeArrayList3[0];
        TEndParentheses tendparenthesesNode5 = (TEndParentheses)nodeArrayList4[0];
        AMethodCall pmethodcallNode1 = new AMethodCall (
              tvariableNode2,
              tstartparenthesesNode3,
              pparamNode4,
              tendparenthesesNode5
        );
        nodeList.Add(pmethodcallNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        PMoreParam pmoreparamNode3 = (PMoreParam)nodeArrayList2[0];
        AVarParam pparamNode1 = new AVarParam (
              tvariableNode2,
              pmoreparamNode3
        );
        nodeList.Add(pparamNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        PMoreParam pmoreparamNode3 = (PMoreParam)nodeArrayList2[0];
        AStringParam pparamNode1 = new AStringParam (
              tstringNode2,
              pmoreparamNode3
        );
        nodeList.Add(pparamNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ANoneParam pparamNode1 = new ANoneParam (
        );
        nodeList.Add(pparamNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TComma tcommaNode2 = (TComma)nodeArrayList1[0];
        TVariable tvariableNode3 = (TVariable)nodeArrayList2[0];
        AOthersMoreParam pmoreparamNode1 = new AOthersMoreParam (
              tcommaNode2,
              tvariableNode3
        );
        nodeList.Add(pmoreparamNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TComma tcommaNode2 = (TComma)nodeArrayList1[0];
        TString tstringNode3 = (TString)nodeArrayList2[0];
        AStringMoreParam pmoreparamNode1 = new AStringMoreParam (
              tcommaNode2,
              tstringNode3
        );
        nodeList.Add(pmoreparamNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ADoneMoreParam pmoreparamNode1 = new ADoneMoreParam (
        );
        nodeList.Add(pmoreparamNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMath pmathNode2 = (PMath)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PMultiDivide pmultidivideNode4 = (PMultiDivide)nodeArrayList3[0];
        AAddMath pmathNode1 = new AAddMath (
              pmathNode2,
              tplusNode3,
              pmultidivideNode4
        );
        nodeList.Add(pmathNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMath pmathNode2 = (PMath)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PMultiDivide pmultidivideNode4 = (PMultiDivide)nodeArrayList3[0];
        ASubMath pmathNode1 = new ASubMath (
              pmathNode2,
              tminusNode3,
              pmultidivideNode4
        );
        nodeList.Add(pmathNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMultiDivide pmultidivideNode2 = (PMultiDivide)nodeArrayList1[0];
        ANoneMath pmathNode1 = new ANoneMath (
              pmultidivideNode2
        );
        nodeList.Add(pmathNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMultiDivide pmultidivideNode2 = (PMultiDivide)nodeArrayList1[0];
        TMultiplication tmultiplicationNode3 = (TMultiplication)nodeArrayList2[0];
        PParentheses pparenthesesNode4 = (PParentheses)nodeArrayList3[0];
        AMultiMultiDivide pmultidivideNode1 = new AMultiMultiDivide (
              pmultidivideNode2,
              tmultiplicationNode3,
              pparenthesesNode4
        );
        nodeList.Add(pmultidivideNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMultiDivide pmultidivideNode2 = (PMultiDivide)nodeArrayList1[0];
        TDivision tdivisionNode3 = (TDivision)nodeArrayList2[0];
        PParentheses pparenthesesNode4 = (PParentheses)nodeArrayList3[0];
        ADivideMultiDivide pmultidivideNode1 = new ADivideMultiDivide (
              pmultidivideNode2,
              tdivisionNode3,
              pparenthesesNode4
        );
        nodeList.Add(pmultidivideNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParentheses pparenthesesNode2 = (PParentheses)nodeArrayList1[0];
        ANoneMultiDivide pmultidivideNode1 = new ANoneMultiDivide (
              pparenthesesNode2
        );
        nodeList.Add(pmultidivideNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TStartParentheses tstartparenthesesNode2 = (TStartParentheses)nodeArrayList1[0];
        PMath pmathNode3 = (PMath)nodeArrayList2[0];
        TEndParentheses tendparenthesesNode4 = (TEndParentheses)nodeArrayList3[0];
        ASomeParentheses pparenthesesNode1 = new ASomeParentheses (
              tstartparenthesesNode2,
              pmathNode3,
              tendparenthesesNode4
        );
        nodeList.Add(pparenthesesNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TVariable tvariableNode2 = (TVariable)nodeArrayList1[0];
        AVariableParentheses pparenthesesNode1 = new AVariableParentheses (
              tvariableNode2
        );
        nodeList.Add(pparenthesesNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntegerParentheses pparenthesesNode1 = new AIntegerParentheses (
              tintegerNode2
        );
        nodeList.Add(pparenthesesNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        AFloatParentheses pparenthesesNode1 = new AFloatParentheses (
              tfloatNode2
        );
        nodeList.Add(pparenthesesNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 3},
        new int[] {33, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {33, 0, 4},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {35, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {2, 0, 5},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {10, 0, 7},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {33, 0, 8},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {4, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {31, 0, 11},
        new int[] {32, 0, 12},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {21, 0, 13},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {25, 0, 14},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {27, 0, 15},
      },
      new int[][] {
        new int[] {-1, 3, 12},
        new int[] {27, 0, 16},
      },
      new int[][] {
        new int[] {-1, 1, 7},
        new int[] {33, 0, 17},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 3},
        new int[] {33, 0, 1},
      },
      new int[][] {
        new int[] {-1, 1, 3},
        new int[] {33, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {33, 0, 30},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {22, 0, 31},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {21, 0, 32},
      },
      new int[][] {
        new int[] {-1, 3, 20},
        new int[] {21, 0, 32},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {10, 0, 35},
        new int[] {21, 0, 36},
        new int[] {23, 0, 37},
        new int[] {33, 0, 38},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {27, 0, 39},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {26, 0, 40},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 26},
        new int[] {27, 0, 43},
      },
      new int[][] {
        new int[] {-1, 3, 27},
        new int[] {27, 0, 44},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {25, 0, 47},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {33, 0, 48},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {25, 0, 49},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {25, 0, 50},
      },
      new int[][] {
        new int[] {-1, 3, 35},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
        new int[] {34, 0, 55},
      },
      new int[][] {
        new int[] {-1, 1, 39},
        new int[] {33, 0, 59},
        new int[] {34, 0, 60},
      },
      new int[][] {
        new int[] {-1, 3, 37},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 11},
        new int[] {23, 0, 63},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 45},
        new int[] {33, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 48},
        new int[] {15, 0, 69},
        new int[] {16, 0, 70},
        new int[] {17, 0, 71},
        new int[] {18, 0, 72},
        new int[] {19, 0, 73},
        new int[] {20, 0, 74},
        new int[] {28, 0, 75},
        new int[] {29, 0, 76},
        new int[] {30, 0, 77},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 51},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 1, 32},
        new int[] {11, 0, 82},
        new int[] {12, 0, 83},
      },
      new int[][] {
        new int[] {-1, 1, 45},
        new int[] {13, 0, 84},
        new int[] {14, 0, 85},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 1, 42},
        new int[] {6, 0, 86},
      },
      new int[][] {
        new int[] {-1, 1, 42},
        new int[] {6, 0, 86},
      },
      new int[][] {
        new int[] {-1, 3, 61},
        new int[] {22, 0, 89},
      },
      new int[][] {
        new int[] {-1, 3, 62},
        new int[] {11, 0, 82},
        new int[] {12, 0, 83},
        new int[] {24, 0, 90},
      },
      new int[][] {
        new int[] {-1, 3, 63},
        new int[] {32, 0, 91},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 17},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {33, 0, 92},
      },
      new int[][] {
        new int[] {-1, 3, 68},
        new int[] {26, 0, 93},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 3, 78},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
        new int[] {34, 0, 94},
      },
      new int[][] {
        new int[] {-1, 3, 79},
        new int[] {26, 0, 96},
      },
      new int[][] {
        new int[] {-1, 3, 80},
        new int[] {26, 0, 97},
      },
      new int[][] {
        new int[] {-1, 3, 81},
        new int[] {11, 0, 82},
        new int[] {12, 0, 83},
        new int[] {22, 0, 98},
      },
      new int[][] {
        new int[] {-1, 3, 82},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 83},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 84},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 85},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
      },
      new int[][] {
        new int[] {-1, 3, 86},
        new int[] {33, 0, 103},
        new int[] {34, 0, 104},
      },
      new int[][] {
        new int[] {-1, 1, 37},
      },
      new int[][] {
        new int[] {-1, 1, 38},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
      new int[][] {
        new int[] {-1, 3, 90},
        new int[] {10, 0, 105},
      },
      new int[][] {
        new int[] {-1, 3, 91},
        new int[] {24, 0, 106},
      },
      new int[][] {
        new int[] {-1, 1, 9},
        new int[] {6, 0, 45},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {2, 0, 5},
      },
      new int[][] {
        new int[] {-1, 3, 94},
        new int[] {22, 0, 109},
      },
      new int[][] {
        new int[] {-1, 3, 95},
        new int[] {11, 0, 82},
        new int[] {12, 0, 83},
        new int[] {22, 0, 110},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {9, 0, 111},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 1, 43},
        new int[] {13, 0, 84},
        new int[] {14, 0, 85},
      },
      new int[][] {
        new int[] {-1, 1, 44},
        new int[] {13, 0, 84},
        new int[] {14, 0, 85},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 1, 40},
      },
      new int[][] {
        new int[] {-1, 1, 41},
      },
      new int[][] {
        new int[] {-1, 3, 105},
        new int[] {21, 0, 51},
        new int[] {31, 0, 52},
        new int[] {32, 0, 53},
        new int[] {33, 0, 54},
        new int[] {34, 0, 112},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 111},
        new int[] {25, 0, 114},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 1, 34},
        new int[] {11, 0, 82},
        new int[] {12, 0, 83},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {7, 0, 19},
        new int[] {8, 0, 20},
        new int[] {33, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 115},
        new int[] {26, 0, 116},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 3},
        new int[] {15, 28},
        new int[] {16, 29},
      },
      new int[][] {
        new int[] {-1, 6},
        new int[] {93, 108},
      },
      new int[][] {
        new int[] {-1, 18},
      },
      new int[][] {
        new int[] {-1, 46},
        new int[] {92, 107},
      },
      new int[][] {
        new int[] {-1, 10},
      },
      new int[][] {
        new int[] {-1, 22},
      },
      new int[][] {
        new int[] {-1, 23},
        new int[] {24, 41},
        new int[] {25, 42},
        new int[] {39, 64},
        new int[] {43, 65},
        new int[] {44, 66},
        new int[] {47, 68},
        new int[] {49, 79},
        new int[] {50, 80},
        new int[] {114, 115},
      },
      new int[][] {
        new int[] {-1, 24},
      },
      new int[][] {
        new int[] {-1, 33},
        new int[] {20, 34},
      },
      new int[][] {
        new int[] {-1, 25},
      },
      new int[][] {
        new int[] {-1, 78},
      },
      new int[][] {
        new int[] {-1, 26},
      },
      new int[][] {
        new int[] {-1, 27},
      },
      new int[][] {
        new int[] {-1, 61},
      },
      new int[][] {
        new int[] {-1, 87},
        new int[] {60, 88},
      },
      new int[][] {
        new int[] {-1, 56},
        new int[] {37, 62},
        new int[] {51, 81},
        new int[] {78, 95},
        new int[] {105, 113},
      },
      new int[][] {
        new int[] {-1, 57},
        new int[] {82, 99},
        new int[] {83, 100},
      },
      new int[][] {
        new int[] {-1, 58},
        new int[] {84, 101},
        new int[] {85, 102},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'public', 'main', variable",
      "expecting: variable",
      "expecting: EOF",
      "expecting: 'public', 'main'",
      "expecting: 'is assigned to'",
      "expecting: 'main'",
      "expecting: float, integer",
      "expecting: 'start parentheses'",
      "expecting: 'start brace'",
      "expecting: 'end'",
      "expecting: 'end parentheses', variable",
      "expecting: 'loop', 'if', 'end brace', variable",
      "expecting: 'end parentheses'",
      "expecting: 'is assigned to', 'start parentheses', 'start bracket', variable",
      "expecting: 'end brace'",
      "expecting: ',', 'end parentheses'",
      "expecting: 'start parentheses', float, integer, variable, string",
      "expecting: 'end parentheses', variable, string",
      "expecting: 'start parentheses', float, integer, variable",
      "expecting: 'start bracket', 'end'",
      "expecting: 'equals', 'is less than', 'is greater than', 'is less than or equal to', 'is greater than or equal to', 'is at least', 'and', 'or', 'not'",
      "expecting: 'plus', 'minus', 'times', 'divided by', 'end parentheses', 'end bracket', 'end'",
      "expecting: 'plus', 'minus', 'end'",
      "expecting: 'plus', 'minus', 'end bracket'",
      "expecting: integer",
      "expecting: 'plus', 'minus', 'end parentheses'",
      "expecting: variable, string",
      "expecting: 'end bracket'",
      "expecting: 'else'",
    };

    private static int[] errors = {
      0, 1, 2, 3, 4, 1, 5, 6, 7, 8, 2, 9, 9, 10, 11, 0, 
      0, 1, 12, 7, 7, 13, 9, 14, 11, 11, 9, 9, 3, 3, 15, 8, 
      1, 8, 8, 16, 17, 18, 19, 11, 2, 14, 14, 11, 11, 1, 12, 11, 
      20, 11, 11, 18, 21, 21, 21, 9, 22, 21, 21, 15, 15, 12, 23, 24, 
      14, 14, 14, 1, 14, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14, 
      14, 25, 18, 18, 18, 18, 26, 12, 12, 9, 4, 27, 15, 3, 12, 25, 
      11, 28, 21, 21, 21, 21, 21, 12, 12, 16, 9, 12, 5, 8, 8, 8, 
      9, 22, 11, 14, 11, 
    };
}
}
