/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAIntegerConstants(AIntegerConstants node);
    void CaseAFloatConstants(AFloatConstants node);
    void CaseAStringConstants(AStringConstants node);
    void CaseANoneConstants(ANoneConstants node);
    void CaseASomeMethods(ASomeMethods node);
    void CaseANoneMethods(ANoneMethods node);
    void CaseASomeInitParam(ASomeInitParam node);
    void CaseANoneInitParam(ANoneInitParam node);
    void CaseAOthersSecondParam(AOthersSecondParam node);
    void CaseADoneSecondParam(ADoneSecondParam node);
    void CaseAProgramMainProgram(AProgramMainProgram node);
    void CaseAVarDecls(AVarDecls node);
    void CaseAArrayDecls(AArrayDecls node);
    void CaseADeclsStuff(ADeclsStuff node);
    void CaseALoopStuff(ALoopStuff node);
    void CaseAIfElseStuff(AIfElseStuff node);
    void CaseAAssignmentStuff(AAssignmentStuff node);
    void CaseAMethodCallStuff(AMethodCallStuff node);
    void CaseANoneStuff(ANoneStuff node);
    void CaseALoops(ALoops node);
    void CaseAVariableMathCircumstance(AVariableMathCircumstance node);
    void CaseAVarStringCircumstance(AVarStringCircumstance node);
    void CaseAIfElse(AIfElse node);
    void CaseAEqualComparison(AEqualComparison node);
    void CaseALessComparison(ALessComparison node);
    void CaseAGreaterComparison(AGreaterComparison node);
    void CaseAAtLeastComparison(AAtLeastComparison node);
    void CaseAGreaterEqualComparison(AGreaterEqualComparison node);
    void CaseALessEqualComparison(ALessEqualComparison node);
    void CaseAAndComparison(AAndComparison node);
    void CaseAOrComparison(AOrComparison node);
    void CaseANotComparison(ANotComparison node);
    void CaseAMathAssignments(AMathAssignments node);
    void CaseAStringAssignments(AStringAssignments node);
    void CaseAMathArrayAssignments(AMathArrayAssignments node);
    void CaseAStringArrayAssignments(AStringArrayAssignments node);
    void CaseAMethodCall(AMethodCall node);
    void CaseAVarParam(AVarParam node);
    void CaseAStringParam(AStringParam node);
    void CaseANoneParam(ANoneParam node);
    void CaseAOthersMoreParam(AOthersMoreParam node);
    void CaseAStringMoreParam(AStringMoreParam node);
    void CaseADoneMoreParam(ADoneMoreParam node);
    void CaseAAddMath(AAddMath node);
    void CaseASubMath(ASubMath node);
    void CaseANoneMath(ANoneMath node);
    void CaseAMultiMultiDivide(AMultiMultiDivide node);
    void CaseADivideMultiDivide(ADivideMultiDivide node);
    void CaseANoneMultiDivide(ANoneMultiDivide node);
    void CaseASomeParentheses(ASomeParentheses node);
    void CaseAVariableParentheses(AVariableParentheses node);
    void CaseAIntegerParentheses(AIntegerParentheses node);
    void CaseAFloatParentheses(AFloatParentheses node);

    void CaseTBang(TBang node);
    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTClass(TClass node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTMain(TMain node);
    void CaseTReturn(TReturn node);
    void CaseTComma(TComma node);
    void CaseTLoop(TLoop node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTAssignment(TAssignment node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTMultiplication(TMultiplication node);
    void CaseTDivision(TDivision node);
    void CaseTEqual(TEqual node);
    void CaseTLess(TLess node);
    void CaseTGreater(TGreater node);
    void CaseTLessEqual(TLessEqual node);
    void CaseTGreaterEqual(TGreaterEqual node);
    void CaseTAtLeast(TAtLeast node);
    void CaseTStartParentheses(TStartParentheses node);
    void CaseTEndParentheses(TEndParentheses node);
    void CaseTStartBracket(TStartBracket node);
    void CaseTEndBracket(TEndBracket node);
    void CaseTStartBrace(TStartBrace node);
    void CaseTEndBrace(TEndBrace node);
    void CaseTEnd(TEnd node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTFloat(TFloat node);
    void CaseTInteger(TInteger node);
    void CaseTVariable(TVariable node);
    void CaseTString(TString node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerConstants(AIntegerConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatConstants(AFloatConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringConstants(AStringConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneConstants(ANoneConstants node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeMethods(ASomeMethods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneMethods(ANoneMethods node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeInitParam(ASomeInitParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneInitParam(ANoneInitParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOthersSecondParam(AOthersSecondParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADoneSecondParam(ADoneSecondParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAProgramMainProgram(AProgramMainProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarDecls(AVarDecls node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAArrayDecls(AArrayDecls node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclsStuff(ADeclsStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALoopStuff(ALoopStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfElseStuff(AIfElseStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStuff(AAssignmentStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodCallStuff(AMethodCallStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneStuff(ANoneStuff node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALoops(ALoops node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableMathCircumstance(AVariableMathCircumstance node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarStringCircumstance(AVarStringCircumstance node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfElse(AIfElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualComparison(AEqualComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessComparison(ALessComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterComparison(AGreaterComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAtLeastComparison(AAtLeastComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterEqualComparison(AGreaterEqualComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessEqualComparison(ALessEqualComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndComparison(AAndComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrComparison(AOrComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotComparison(ANotComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathAssignments(AMathAssignments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringAssignments(AStringAssignments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathArrayAssignments(AMathArrayAssignments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringArrayAssignments(AStringArrayAssignments node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMethodCall(AMethodCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVarParam(AVarParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringParam(AStringParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParam(ANoneParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOthersMoreParam(AOthersMoreParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringMoreParam(AStringMoreParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADoneMoreParam(ADoneMoreParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddMath(AAddMath node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubMath(ASubMath node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneMath(ANoneMath node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiMultiDivide(AMultiMultiDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideMultiDivide(ADivideMultiDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneMultiDivide(ANoneMultiDivide node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASomeParentheses(ASomeParentheses node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableParentheses(AVariableParentheses node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerParentheses(AIntegerParentheses node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatParentheses(AFloatParentheses node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTBang(TBang node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClass(TClass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLoop(TLoop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssignment(TAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMultiplication(TMultiplication node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDivision(TDivision node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreater(TGreater node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessEqual(TLessEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterEqual(TGreaterEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAtLeast(TAtLeast node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStartParentheses(TStartParentheses node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndParentheses(TEndParentheses node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStartBracket(TStartBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndBracket(TEndBracket node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStartBrace(TStartBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEndBrace(TEndBrace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEnd(TEnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTVariable(TVariable node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAIntegerConstants(AIntegerConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerConstants(AIntegerConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerConstants(AIntegerConstants node)
    {
        InAIntegerConstants(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAIntegerConstants(node);
    }
    public virtual void InAFloatConstants(AFloatConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatConstants(AFloatConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatConstants(AFloatConstants node)
    {
        InAFloatConstants(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAFloatConstants(node);
    }
    public virtual void InAStringConstants(AStringConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringConstants(AStringConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringConstants(AStringConstants node)
    {
        InAStringConstants(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAStringConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InASomeMethods(ASomeMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeMethods(ASomeMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeMethods(ASomeMethods node)
    {
        InASomeMethods(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        if(node.GetInitParam() != null)
        {
            node.GetInitParam().Apply(this);
        }
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        if(node.GetStartBrace() != null)
        {
            node.GetStartBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetEndBrace() != null)
        {
            node.GetEndBrace().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        OutASomeMethods(node);
    }
    public virtual void InANoneMethods(ANoneMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMethods(ANoneMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMethods(ANoneMethods node)
    {
        InANoneMethods(node);
        OutANoneMethods(node);
    }
    public virtual void InASomeInitParam(ASomeInitParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeInitParam(ASomeInitParam node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeInitParam(ASomeInitParam node)
    {
        InASomeInitParam(node);
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetSecondParam() != null)
        {
            node.GetSecondParam().Apply(this);
        }
        OutASomeInitParam(node);
    }
    public virtual void InANoneInitParam(ANoneInitParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneInitParam(ANoneInitParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneInitParam(ANoneInitParam node)
    {
        InANoneInitParam(node);
        OutANoneInitParam(node);
    }
    public virtual void InAOthersSecondParam(AOthersSecondParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOthersSecondParam(AOthersSecondParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAOthersSecondParam(AOthersSecondParam node)
    {
        InAOthersSecondParam(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetSecondParam() != null)
        {
            node.GetSecondParam().Apply(this);
        }
        OutAOthersSecondParam(node);
    }
    public virtual void InADoneSecondParam(ADoneSecondParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutADoneSecondParam(ADoneSecondParam node)
    {
        DefaultOut(node);
    }

    public override void CaseADoneSecondParam(ADoneSecondParam node)
    {
        InADoneSecondParam(node);
        OutADoneSecondParam(node);
    }
    public virtual void InAProgramMainProgram(AProgramMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgramMainProgram(AProgramMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgramMainProgram(AProgramMainProgram node)
    {
        InAProgramMainProgram(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetStartBrace() != null)
        {
            node.GetStartBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetEndBrace() != null)
        {
            node.GetEndBrace().Apply(this);
        }
        OutAProgramMainProgram(node);
    }
    public virtual void InAVarDecls(AVarDecls node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDecls(AVarDecls node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDecls(AVarDecls node)
    {
        InAVarDecls(node);
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        OutAVarDecls(node);
    }
    public virtual void InAArrayDecls(AArrayDecls node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDecls(AArrayDecls node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDecls(AArrayDecls node)
    {
        InAArrayDecls(node);
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetStartBracket() != null)
        {
            node.GetStartBracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetEndBracket() != null)
        {
            node.GetEndBracket().Apply(this);
        }
        OutAArrayDecls(node);
    }
    public virtual void InADeclsStuff(ADeclsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclsStuff(ADeclsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclsStuff(ADeclsStuff node)
    {
        InADeclsStuff(node);
        if(node.GetDecls() != null)
        {
            node.GetDecls().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        OutADeclsStuff(node);
    }
    public virtual void InALoopStuff(ALoopStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStuff(ALoopStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStuff(ALoopStuff node)
    {
        InALoopStuff(node);
        if(node.GetLoops() != null)
        {
            node.GetLoops().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        OutALoopStuff(node);
    }
    public virtual void InAIfElseStuff(AIfElseStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStuff(AIfElseStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStuff(AIfElseStuff node)
    {
        InAIfElseStuff(node);
        if(node.GetIfElse() != null)
        {
            node.GetIfElse().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        OutAIfElseStuff(node);
    }
    public virtual void InAAssignmentStuff(AAssignmentStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStuff(AAssignmentStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStuff(AAssignmentStuff node)
    {
        InAAssignmentStuff(node);
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        OutAAssignmentStuff(node);
    }
    public virtual void InAMethodCallStuff(AMethodCallStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCallStuff(AMethodCallStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCallStuff(AMethodCallStuff node)
    {
        InAMethodCallStuff(node);
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        OutAMethodCallStuff(node);
    }
    public virtual void InANoneStuff(ANoneStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStuff(ANoneStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStuff(ANoneStuff node)
    {
        InANoneStuff(node);
        OutANoneStuff(node);
    }
    public virtual void InALoops(ALoops node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoops(ALoops node)
    {
        DefaultOut(node);
    }

    public override void CaseALoops(ALoops node)
    {
        InALoops(node);
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        if(node.GetCircumstance() != null)
        {
            node.GetCircumstance().Apply(this);
        }
        if(node.GetStartBrace() != null)
        {
            node.GetStartBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetEndBrace() != null)
        {
            node.GetEndBrace().Apply(this);
        }
        OutALoops(node);
    }
    public virtual void InAVariableMathCircumstance(AVariableMathCircumstance node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableMathCircumstance(AVariableMathCircumstance node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableMathCircumstance(AVariableMathCircumstance node)
    {
        InAVariableMathCircumstance(node);
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        OutAVariableMathCircumstance(node);
    }
    public virtual void InAVarStringCircumstance(AVarStringCircumstance node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarStringCircumstance(AVarStringCircumstance node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarStringCircumstance(AVarStringCircumstance node)
    {
        InAVarStringCircumstance(node);
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        OutAVarStringCircumstance(node);
    }
    public virtual void InAIfElse(AIfElse node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElse(AIfElse node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElse(AIfElse node)
    {
        InAIfElse(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetCircumstance() != null)
        {
            node.GetCircumstance().Apply(this);
        }
        if(node.GetFirst1() != null)
        {
            node.GetFirst1().Apply(this);
        }
        if(node.GetFirst2() != null)
        {
            node.GetFirst2().Apply(this);
        }
        if(node.GetFirst3() != null)
        {
            node.GetFirst3().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetSecond1() != null)
        {
            node.GetSecond1().Apply(this);
        }
        if(node.GetSecond2() != null)
        {
            node.GetSecond2().Apply(this);
        }
        if(node.GetSecond3() != null)
        {
            node.GetSecond3().Apply(this);
        }
        OutAIfElse(node);
    }
    public virtual void InAEqualComparison(AEqualComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualComparison(AEqualComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualComparison(AEqualComparison node)
    {
        InAEqualComparison(node);
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        OutAEqualComparison(node);
    }
    public virtual void InALessComparison(ALessComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessComparison(ALessComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseALessComparison(ALessComparison node)
    {
        InALessComparison(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessComparison(node);
    }
    public virtual void InAGreaterComparison(AGreaterComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterComparison(AGreaterComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterComparison(AGreaterComparison node)
    {
        InAGreaterComparison(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterComparison(node);
    }
    public virtual void InAAtLeastComparison(AAtLeastComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAtLeastComparison(AAtLeastComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAAtLeastComparison(AAtLeastComparison node)
    {
        InAAtLeastComparison(node);
        if(node.GetAtLeast() != null)
        {
            node.GetAtLeast().Apply(this);
        }
        OutAAtLeastComparison(node);
    }
    public virtual void InAGreaterEqualComparison(AGreaterEqualComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualComparison(AGreaterEqualComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualComparison(AGreaterEqualComparison node)
    {
        InAGreaterEqualComparison(node);
        if(node.GetGreaterEqual() != null)
        {
            node.GetGreaterEqual().Apply(this);
        }
        OutAGreaterEqualComparison(node);
    }
    public virtual void InALessEqualComparison(ALessEqualComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualComparison(ALessEqualComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualComparison(ALessEqualComparison node)
    {
        InALessEqualComparison(node);
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        OutALessEqualComparison(node);
    }
    public virtual void InAAndComparison(AAndComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndComparison(AAndComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndComparison(AAndComparison node)
    {
        InAAndComparison(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndComparison(node);
    }
    public virtual void InAOrComparison(AOrComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrComparison(AOrComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrComparison(AOrComparison node)
    {
        InAOrComparison(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrComparison(node);
    }
    public virtual void InANotComparison(ANotComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotComparison(ANotComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseANotComparison(ANotComparison node)
    {
        InANotComparison(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotComparison(node);
    }
    public virtual void InAMathAssignments(AMathAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathAssignments(AMathAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathAssignments(AMathAssignments node)
    {
        InAMathAssignments(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        OutAMathAssignments(node);
    }
    public virtual void InAStringAssignments(AStringAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringAssignments(AStringAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringAssignments(AStringAssignments node)
    {
        InAStringAssignments(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringAssignments(node);
    }
    public virtual void InAMathArrayAssignments(AMathArrayAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathArrayAssignments(AMathArrayAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathArrayAssignments(AMathArrayAssignments node)
    {
        InAMathArrayAssignments(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStartBracket() != null)
        {
            node.GetStartBracket().Apply(this);
        }
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        if(node.GetEndBracket() != null)
        {
            node.GetEndBracket().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        OutAMathArrayAssignments(node);
    }
    public virtual void InAStringArrayAssignments(AStringArrayAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringArrayAssignments(AStringArrayAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringArrayAssignments(AStringArrayAssignments node)
    {
        InAStringArrayAssignments(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStartBracket() != null)
        {
            node.GetStartBracket().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetEndBracket() != null)
        {
            node.GetEndBracket().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringArrayAssignments(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InAVarParam(AVarParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarParam(AVarParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarParam(AVarParam node)
    {
        InAVarParam(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetMoreParam() != null)
        {
            node.GetMoreParam().Apply(this);
        }
        OutAVarParam(node);
    }
    public virtual void InAStringParam(AStringParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringParam(AStringParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringParam(AStringParam node)
    {
        InAStringParam(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetMoreParam() != null)
        {
            node.GetMoreParam().Apply(this);
        }
        OutAStringParam(node);
    }
    public virtual void InANoneParam(ANoneParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParam(ANoneParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParam(ANoneParam node)
    {
        InANoneParam(node);
        OutANoneParam(node);
    }
    public virtual void InAOthersMoreParam(AOthersMoreParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOthersMoreParam(AOthersMoreParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAOthersMoreParam(AOthersMoreParam node)
    {
        InAOthersMoreParam(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAOthersMoreParam(node);
    }
    public virtual void InAStringMoreParam(AStringMoreParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringMoreParam(AStringMoreParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringMoreParam(AStringMoreParam node)
    {
        InAStringMoreParam(node);
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringMoreParam(node);
    }
    public virtual void InADoneMoreParam(ADoneMoreParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutADoneMoreParam(ADoneMoreParam node)
    {
        DefaultOut(node);
    }

    public override void CaseADoneMoreParam(ADoneMoreParam node)
    {
        InADoneMoreParam(node);
        OutADoneMoreParam(node);
    }
    public virtual void InAAddMath(AAddMath node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddMath(AAddMath node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddMath(AAddMath node)
    {
        InAAddMath(node);
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        OutAAddMath(node);
    }
    public virtual void InASubMath(ASubMath node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubMath(ASubMath node)
    {
        DefaultOut(node);
    }

    public override void CaseASubMath(ASubMath node)
    {
        InASubMath(node);
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        OutASubMath(node);
    }
    public virtual void InANoneMath(ANoneMath node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMath(ANoneMath node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMath(ANoneMath node)
    {
        InANoneMath(node);
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        OutANoneMath(node);
    }
    public virtual void InAMultiMultiDivide(AMultiMultiDivide node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiMultiDivide(AMultiMultiDivide node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiMultiDivide(AMultiMultiDivide node)
    {
        InAMultiMultiDivide(node);
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        if(node.GetMultiplication() != null)
        {
            node.GetMultiplication().Apply(this);
        }
        if(node.GetParentheses() != null)
        {
            node.GetParentheses().Apply(this);
        }
        OutAMultiMultiDivide(node);
    }
    public virtual void InADivideMultiDivide(ADivideMultiDivide node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideMultiDivide(ADivideMultiDivide node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideMultiDivide(ADivideMultiDivide node)
    {
        InADivideMultiDivide(node);
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        if(node.GetDivision() != null)
        {
            node.GetDivision().Apply(this);
        }
        if(node.GetParentheses() != null)
        {
            node.GetParentheses().Apply(this);
        }
        OutADivideMultiDivide(node);
    }
    public virtual void InANoneMultiDivide(ANoneMultiDivide node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMultiDivide(ANoneMultiDivide node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMultiDivide(ANoneMultiDivide node)
    {
        InANoneMultiDivide(node);
        if(node.GetParentheses() != null)
        {
            node.GetParentheses().Apply(this);
        }
        OutANoneMultiDivide(node);
    }
    public virtual void InASomeParentheses(ASomeParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeParentheses(ASomeParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeParentheses(ASomeParentheses node)
    {
        InASomeParentheses(node);
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        OutASomeParentheses(node);
    }
    public virtual void InAVariableParentheses(AVariableParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableParentheses(AVariableParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableParentheses(AVariableParentheses node)
    {
        InAVariableParentheses(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAVariableParentheses(node);
    }
    public virtual void InAIntegerParentheses(AIntegerParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerParentheses(AIntegerParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerParentheses(AIntegerParentheses node)
    {
        InAIntegerParentheses(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerParentheses(node);
    }
    public virtual void InAFloatParentheses(AFloatParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatParentheses(AFloatParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatParentheses(AFloatParentheses node)
    {
        InAFloatParentheses(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatParentheses(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainProgram() != null)
        {
            node.GetMainProgram().Apply(this);
        }
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAIntegerConstants(AIntegerConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerConstants(AIntegerConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerConstants(AIntegerConstants node)
    {
        InAIntegerConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAIntegerConstants(node);
    }
    public virtual void InAFloatConstants(AFloatConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatConstants(AFloatConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatConstants(AFloatConstants node)
    {
        InAFloatConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAFloatConstants(node);
    }
    public virtual void InAStringConstants(AStringConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringConstants(AStringConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringConstants(AStringConstants node)
    {
        InAStringConstants(node);
        if(node.GetConstants() != null)
        {
            node.GetConstants().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAStringConstants(node);
    }
    public virtual void InANoneConstants(ANoneConstants node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneConstants(ANoneConstants node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneConstants(ANoneConstants node)
    {
        InANoneConstants(node);
        OutANoneConstants(node);
    }
    public virtual void InASomeMethods(ASomeMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeMethods(ASomeMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeMethods(ASomeMethods node)
    {
        InASomeMethods(node);
        if(node.GetMethods() != null)
        {
            node.GetMethods().Apply(this);
        }
        if(node.GetEndBrace() != null)
        {
            node.GetEndBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetStartBrace() != null)
        {
            node.GetStartBrace().Apply(this);
        }
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        if(node.GetInitParam() != null)
        {
            node.GetInitParam().Apply(this);
        }
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutASomeMethods(node);
    }
    public virtual void InANoneMethods(ANoneMethods node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMethods(ANoneMethods node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMethods(ANoneMethods node)
    {
        InANoneMethods(node);
        OutANoneMethods(node);
    }
    public virtual void InASomeInitParam(ASomeInitParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeInitParam(ASomeInitParam node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeInitParam(ASomeInitParam node)
    {
        InASomeInitParam(node);
        if(node.GetSecondParam() != null)
        {
            node.GetSecondParam().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        OutASomeInitParam(node);
    }
    public virtual void InANoneInitParam(ANoneInitParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneInitParam(ANoneInitParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneInitParam(ANoneInitParam node)
    {
        InANoneInitParam(node);
        OutANoneInitParam(node);
    }
    public virtual void InAOthersSecondParam(AOthersSecondParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOthersSecondParam(AOthersSecondParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAOthersSecondParam(AOthersSecondParam node)
    {
        InAOthersSecondParam(node);
        if(node.GetSecondParam() != null)
        {
            node.GetSecondParam().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutAOthersSecondParam(node);
    }
    public virtual void InADoneSecondParam(ADoneSecondParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutADoneSecondParam(ADoneSecondParam node)
    {
        DefaultOut(node);
    }

    public override void CaseADoneSecondParam(ADoneSecondParam node)
    {
        InADoneSecondParam(node);
        OutADoneSecondParam(node);
    }
    public virtual void InAProgramMainProgram(AProgramMainProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgramMainProgram(AProgramMainProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgramMainProgram(AProgramMainProgram node)
    {
        InAProgramMainProgram(node);
        if(node.GetEndBrace() != null)
        {
            node.GetEndBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetStartBrace() != null)
        {
            node.GetStartBrace().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAProgramMainProgram(node);
    }
    public virtual void InAVarDecls(AVarDecls node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarDecls(AVarDecls node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarDecls(AVarDecls node)
    {
        InAVarDecls(node);
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        OutAVarDecls(node);
    }
    public virtual void InAArrayDecls(AArrayDecls node)
    {
        DefaultIn(node);
    }

    public virtual void OutAArrayDecls(AArrayDecls node)
    {
        DefaultOut(node);
    }

    public override void CaseAArrayDecls(AArrayDecls node)
    {
        InAArrayDecls(node);
        if(node.GetEndBracket() != null)
        {
            node.GetEndBracket().Apply(this);
        }
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        if(node.GetStartBracket() != null)
        {
            node.GetStartBracket().Apply(this);
        }
        if(node.GetVar2() != null)
        {
            node.GetVar2().Apply(this);
        }
        if(node.GetVar1() != null)
        {
            node.GetVar1().Apply(this);
        }
        OutAArrayDecls(node);
    }
    public virtual void InADeclsStuff(ADeclsStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclsStuff(ADeclsStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclsStuff(ADeclsStuff node)
    {
        InADeclsStuff(node);
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetDecls() != null)
        {
            node.GetDecls().Apply(this);
        }
        OutADeclsStuff(node);
    }
    public virtual void InALoopStuff(ALoopStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoopStuff(ALoopStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseALoopStuff(ALoopStuff node)
    {
        InALoopStuff(node);
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetLoops() != null)
        {
            node.GetLoops().Apply(this);
        }
        OutALoopStuff(node);
    }
    public virtual void InAIfElseStuff(AIfElseStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElseStuff(AIfElseStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElseStuff(AIfElseStuff node)
    {
        InAIfElseStuff(node);
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetIfElse() != null)
        {
            node.GetIfElse().Apply(this);
        }
        OutAIfElseStuff(node);
    }
    public virtual void InAAssignmentStuff(AAssignmentStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStuff(AAssignmentStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStuff(AAssignmentStuff node)
    {
        InAAssignmentStuff(node);
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetAssignments() != null)
        {
            node.GetAssignments().Apply(this);
        }
        OutAAssignmentStuff(node);
    }
    public virtual void InAMethodCallStuff(AMethodCallStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCallStuff(AMethodCallStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCallStuff(AMethodCallStuff node)
    {
        InAMethodCallStuff(node);
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetEnd() != null)
        {
            node.GetEnd().Apply(this);
        }
        if(node.GetMethodCall() != null)
        {
            node.GetMethodCall().Apply(this);
        }
        OutAMethodCallStuff(node);
    }
    public virtual void InANoneStuff(ANoneStuff node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneStuff(ANoneStuff node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneStuff(ANoneStuff node)
    {
        InANoneStuff(node);
        OutANoneStuff(node);
    }
    public virtual void InALoops(ALoops node)
    {
        DefaultIn(node);
    }

    public virtual void OutALoops(ALoops node)
    {
        DefaultOut(node);
    }

    public override void CaseALoops(ALoops node)
    {
        InALoops(node);
        if(node.GetEndBrace() != null)
        {
            node.GetEndBrace().Apply(this);
        }
        if(node.GetStuff() != null)
        {
            node.GetStuff().Apply(this);
        }
        if(node.GetStartBrace() != null)
        {
            node.GetStartBrace().Apply(this);
        }
        if(node.GetCircumstance() != null)
        {
            node.GetCircumstance().Apply(this);
        }
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        OutALoops(node);
    }
    public virtual void InAVariableMathCircumstance(AVariableMathCircumstance node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableMathCircumstance(AVariableMathCircumstance node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableMathCircumstance(AVariableMathCircumstance node)
    {
        InAVariableMathCircumstance(node);
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        OutAVariableMathCircumstance(node);
    }
    public virtual void InAVarStringCircumstance(AVarStringCircumstance node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarStringCircumstance(AVarStringCircumstance node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarStringCircumstance(AVarStringCircumstance node)
    {
        InAVarStringCircumstance(node);
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        OutAVarStringCircumstance(node);
    }
    public virtual void InAIfElse(AIfElse node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfElse(AIfElse node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfElse(AIfElse node)
    {
        InAIfElse(node);
        if(node.GetSecond3() != null)
        {
            node.GetSecond3().Apply(this);
        }
        if(node.GetSecond2() != null)
        {
            node.GetSecond2().Apply(this);
        }
        if(node.GetSecond1() != null)
        {
            node.GetSecond1().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetFirst3() != null)
        {
            node.GetFirst3().Apply(this);
        }
        if(node.GetFirst2() != null)
        {
            node.GetFirst2().Apply(this);
        }
        if(node.GetFirst1() != null)
        {
            node.GetFirst1().Apply(this);
        }
        if(node.GetCircumstance() != null)
        {
            node.GetCircumstance().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfElse(node);
    }
    public virtual void InAEqualComparison(AEqualComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualComparison(AEqualComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualComparison(AEqualComparison node)
    {
        InAEqualComparison(node);
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        OutAEqualComparison(node);
    }
    public virtual void InALessComparison(ALessComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessComparison(ALessComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseALessComparison(ALessComparison node)
    {
        InALessComparison(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessComparison(node);
    }
    public virtual void InAGreaterComparison(AGreaterComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterComparison(AGreaterComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterComparison(AGreaterComparison node)
    {
        InAGreaterComparison(node);
        if(node.GetGreater() != null)
        {
            node.GetGreater().Apply(this);
        }
        OutAGreaterComparison(node);
    }
    public virtual void InAAtLeastComparison(AAtLeastComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAtLeastComparison(AAtLeastComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAAtLeastComparison(AAtLeastComparison node)
    {
        InAAtLeastComparison(node);
        if(node.GetAtLeast() != null)
        {
            node.GetAtLeast().Apply(this);
        }
        OutAAtLeastComparison(node);
    }
    public virtual void InAGreaterEqualComparison(AGreaterEqualComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualComparison(AGreaterEqualComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualComparison(AGreaterEqualComparison node)
    {
        InAGreaterEqualComparison(node);
        if(node.GetGreaterEqual() != null)
        {
            node.GetGreaterEqual().Apply(this);
        }
        OutAGreaterEqualComparison(node);
    }
    public virtual void InALessEqualComparison(ALessEqualComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualComparison(ALessEqualComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualComparison(ALessEqualComparison node)
    {
        InALessEqualComparison(node);
        if(node.GetLessEqual() != null)
        {
            node.GetLessEqual().Apply(this);
        }
        OutALessEqualComparison(node);
    }
    public virtual void InAAndComparison(AAndComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndComparison(AAndComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndComparison(AAndComparison node)
    {
        InAAndComparison(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndComparison(node);
    }
    public virtual void InAOrComparison(AOrComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrComparison(AOrComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrComparison(AOrComparison node)
    {
        InAOrComparison(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrComparison(node);
    }
    public virtual void InANotComparison(ANotComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotComparison(ANotComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseANotComparison(ANotComparison node)
    {
        InANotComparison(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotComparison(node);
    }
    public virtual void InAMathAssignments(AMathAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathAssignments(AMathAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathAssignments(AMathAssignments node)
    {
        InAMathAssignments(node);
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAMathAssignments(node);
    }
    public virtual void InAStringAssignments(AStringAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringAssignments(AStringAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringAssignments(AStringAssignments node)
    {
        InAStringAssignments(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAStringAssignments(node);
    }
    public virtual void InAMathArrayAssignments(AMathArrayAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathArrayAssignments(AMathArrayAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathArrayAssignments(AMathArrayAssignments node)
    {
        InAMathArrayAssignments(node);
        if(node.GetMath2() != null)
        {
            node.GetMath2().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetEndBracket() != null)
        {
            node.GetEndBracket().Apply(this);
        }
        if(node.GetMath1() != null)
        {
            node.GetMath1().Apply(this);
        }
        if(node.GetStartBracket() != null)
        {
            node.GetStartBracket().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAMathArrayAssignments(node);
    }
    public virtual void InAStringArrayAssignments(AStringArrayAssignments node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringArrayAssignments(AStringArrayAssignments node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringArrayAssignments(AStringArrayAssignments node)
    {
        InAStringArrayAssignments(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        if(node.GetEndBracket() != null)
        {
            node.GetEndBracket().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetStartBracket() != null)
        {
            node.GetStartBracket().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAStringArrayAssignments(node);
    }
    public virtual void InAMethodCall(AMethodCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMethodCall(AMethodCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAMethodCall(AMethodCall node)
    {
        InAMethodCall(node);
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAMethodCall(node);
    }
    public virtual void InAVarParam(AVarParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVarParam(AVarParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAVarParam(AVarParam node)
    {
        InAVarParam(node);
        if(node.GetMoreParam() != null)
        {
            node.GetMoreParam().Apply(this);
        }
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAVarParam(node);
    }
    public virtual void InAStringParam(AStringParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringParam(AStringParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringParam(AStringParam node)
    {
        InAStringParam(node);
        if(node.GetMoreParam() != null)
        {
            node.GetMoreParam().Apply(this);
        }
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringParam(node);
    }
    public virtual void InANoneParam(ANoneParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParam(ANoneParam node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParam(ANoneParam node)
    {
        InANoneParam(node);
        OutANoneParam(node);
    }
    public virtual void InAOthersMoreParam(AOthersMoreParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOthersMoreParam(AOthersMoreParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAOthersMoreParam(AOthersMoreParam node)
    {
        InAOthersMoreParam(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutAOthersMoreParam(node);
    }
    public virtual void InAStringMoreParam(AStringMoreParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringMoreParam(AStringMoreParam node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringMoreParam(AStringMoreParam node)
    {
        InAStringMoreParam(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        if(node.GetComma() != null)
        {
            node.GetComma().Apply(this);
        }
        OutAStringMoreParam(node);
    }
    public virtual void InADoneMoreParam(ADoneMoreParam node)
    {
        DefaultIn(node);
    }

    public virtual void OutADoneMoreParam(ADoneMoreParam node)
    {
        DefaultOut(node);
    }

    public override void CaseADoneMoreParam(ADoneMoreParam node)
    {
        InADoneMoreParam(node);
        OutADoneMoreParam(node);
    }
    public virtual void InAAddMath(AAddMath node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddMath(AAddMath node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddMath(AAddMath node)
    {
        InAAddMath(node);
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        OutAAddMath(node);
    }
    public virtual void InASubMath(ASubMath node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubMath(ASubMath node)
    {
        DefaultOut(node);
    }

    public override void CaseASubMath(ASubMath node)
    {
        InASubMath(node);
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        OutASubMath(node);
    }
    public virtual void InANoneMath(ANoneMath node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMath(ANoneMath node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMath(ANoneMath node)
    {
        InANoneMath(node);
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        OutANoneMath(node);
    }
    public virtual void InAMultiMultiDivide(AMultiMultiDivide node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiMultiDivide(AMultiMultiDivide node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiMultiDivide(AMultiMultiDivide node)
    {
        InAMultiMultiDivide(node);
        if(node.GetParentheses() != null)
        {
            node.GetParentheses().Apply(this);
        }
        if(node.GetMultiplication() != null)
        {
            node.GetMultiplication().Apply(this);
        }
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        OutAMultiMultiDivide(node);
    }
    public virtual void InADivideMultiDivide(ADivideMultiDivide node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideMultiDivide(ADivideMultiDivide node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideMultiDivide(ADivideMultiDivide node)
    {
        InADivideMultiDivide(node);
        if(node.GetParentheses() != null)
        {
            node.GetParentheses().Apply(this);
        }
        if(node.GetDivision() != null)
        {
            node.GetDivision().Apply(this);
        }
        if(node.GetMultiDivide() != null)
        {
            node.GetMultiDivide().Apply(this);
        }
        OutADivideMultiDivide(node);
    }
    public virtual void InANoneMultiDivide(ANoneMultiDivide node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneMultiDivide(ANoneMultiDivide node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneMultiDivide(ANoneMultiDivide node)
    {
        InANoneMultiDivide(node);
        if(node.GetParentheses() != null)
        {
            node.GetParentheses().Apply(this);
        }
        OutANoneMultiDivide(node);
    }
    public virtual void InASomeParentheses(ASomeParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutASomeParentheses(ASomeParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseASomeParentheses(ASomeParentheses node)
    {
        InASomeParentheses(node);
        if(node.GetEndParentheses() != null)
        {
            node.GetEndParentheses().Apply(this);
        }
        if(node.GetMath() != null)
        {
            node.GetMath().Apply(this);
        }
        if(node.GetStartParentheses() != null)
        {
            node.GetStartParentheses().Apply(this);
        }
        OutASomeParentheses(node);
    }
    public virtual void InAVariableParentheses(AVariableParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableParentheses(AVariableParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableParentheses(AVariableParentheses node)
    {
        InAVariableParentheses(node);
        if(node.GetVariable() != null)
        {
            node.GetVariable().Apply(this);
        }
        OutAVariableParentheses(node);
    }
    public virtual void InAIntegerParentheses(AIntegerParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerParentheses(AIntegerParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerParentheses(AIntegerParentheses node)
    {
        InAIntegerParentheses(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerParentheses(node);
    }
    public virtual void InAFloatParentheses(AFloatParentheses node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatParentheses(AFloatParentheses node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatParentheses(AFloatParentheses node)
    {
        InAFloatParentheses(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatParentheses(node);
    }
}
} // namespace comp5210.analysis
