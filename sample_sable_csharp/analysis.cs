/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using comp5210.node;

namespace comp5210.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAPublicFred(APublicFred node);
    void CaseAPrivateFred(APrivateFred node);

    void CaseTBang(TBang node);
    void CaseTWhitespace(TWhitespace node);
    void CaseTComment(TComment node);
    void CaseTOp(TOp node);
    void CaseTClass(TClass node);
    void CaseTPublic(TPublic node);
    void CaseTPrivate(TPrivate node);
    void CaseTId(TId node);
    void CaseTReturn(TReturn node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAPublicFred(APublicFred node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPrivateFred(APrivateFred node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTBang(TBang node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhitespace(TWhitespace node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOp(TOp node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTClass(TClass node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPublic(TPublic node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPrivate(TPrivate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTReturn(TReturn node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPFred().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAPublicFred(APublicFred node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicFred(APublicFred node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicFred(APublicFred node)
    {
        InAPublicFred(node);
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        OutAPublicFred(node);
    }
    public virtual void InAPrivateFred(APrivateFred node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateFred(APrivateFred node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateFred(APrivateFred node)
    {
        InAPrivateFred(node);
        if(node.GetPrivate() != null)
        {
            node.GetPrivate().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        OutAPrivateFred(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPFred().Apply(this);
        OutStart(node);
    }

    public virtual void InAPublicFred(APublicFred node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPublicFred(APublicFred node)
    {
        DefaultOut(node);
    }

    public override void CaseAPublicFred(APublicFred node)
    {
        InAPublicFred(node);
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetPublic() != null)
        {
            node.GetPublic().Apply(this);
        }
        OutAPublicFred(node);
    }
    public virtual void InAPrivateFred(APrivateFred node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPrivateFred(APrivateFred node)
    {
        DefaultOut(node);
    }

    public override void CaseAPrivateFred(APrivateFred node)
    {
        InAPrivateFred(node);
        if(node.GetId2() != null)
        {
            node.GetId2().Apply(this);
        }
        if(node.GetId1() != null)
        {
            node.GetId1().Apply(this);
        }
        if(node.GetPrivate() != null)
        {
            node.GetPrivate().Apply(this);
        }
        OutAPrivateFred(node);
    }
}
} // namespace comp5210.analysis
