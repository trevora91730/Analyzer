/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  comp5210.analysis;

namespace comp5210.node {

public abstract class PFred : Node
{
}


public sealed class APublicFred : PFred
{
    private TPublic _public_;
    private TId _id1_;
    private TId _id2_;

    public APublicFred ()
    {
    }

    public APublicFred (
            TPublic _public_,
            TId _id1_,
            TId _id2_
    )
    {
        SetPublic (_public_);
        SetId1 (_id1_);
        SetId2 (_id2_);
    }

    public override Object Clone()
    {
        return new APublicFred (
            (TPublic)CloneNode (_public_),
            (TId)CloneNode (_id1_),
            (TId)CloneNode (_id2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPublicFred(this);
    }

    public TPublic GetPublic ()
    {
        return _public_;
    }

    public void SetPublic (TPublic node)
    {
        if(_public_ != null)
        {
            _public_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _public_ = node;
    }
    public TId GetId1 ()
    {
        return _id1_;
    }

    public void SetId1 (TId node)
    {
        if(_id1_ != null)
        {
            _id1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id1_ = node;
    }
    public TId GetId2 ()
    {
        return _id2_;
    }

    public void SetId2 (TId node)
    {
        if(_id2_ != null)
        {
            _id2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_public_)
            + ToString (_id1_)
            + ToString (_id2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _public_ == child )
        {
            _public_ = null;
            return;
        }
        if ( _id1_ == child )
        {
            _id1_ = null;
            return;
        }
        if ( _id2_ == child )
        {
            _id2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _public_ == oldChild )
        {
            SetPublic ((TPublic) newChild);
            return;
        }
        if ( _id1_ == oldChild )
        {
            SetId1 ((TId) newChild);
            return;
        }
        if ( _id2_ == oldChild )
        {
            SetId2 ((TId) newChild);
            return;
        }
    }

}
public sealed class APrivateFred : PFred
{
    private TPrivate _private_;
    private TId _id1_;
    private TId _id2_;

    public APrivateFred ()
    {
    }

    public APrivateFred (
            TPrivate _private_,
            TId _id1_,
            TId _id2_
    )
    {
        SetPrivate (_private_);
        SetId1 (_id1_);
        SetId2 (_id2_);
    }

    public override Object Clone()
    {
        return new APrivateFred (
            (TPrivate)CloneNode (_private_),
            (TId)CloneNode (_id1_),
            (TId)CloneNode (_id2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPrivateFred(this);
    }

    public TPrivate GetPrivate ()
    {
        return _private_;
    }

    public void SetPrivate (TPrivate node)
    {
        if(_private_ != null)
        {
            _private_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _private_ = node;
    }
    public TId GetId1 ()
    {
        return _id1_;
    }

    public void SetId1 (TId node)
    {
        if(_id1_ != null)
        {
            _id1_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id1_ = node;
    }
    public TId GetId2 ()
    {
        return _id2_;
    }

    public void SetId2 (TId node)
    {
        if(_id2_ != null)
        {
            _id2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_private_)
            + ToString (_id1_)
            + ToString (_id2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _private_ == child )
        {
            _private_ = null;
            return;
        }
        if ( _id1_ == child )
        {
            _id1_ = null;
            return;
        }
        if ( _id2_ == child )
        {
            _id2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _private_ == oldChild )
        {
            SetPrivate ((TPrivate) newChild);
            return;
        }
        if ( _id1_ == oldChild )
        {
            SetId1 ((TId) newChild);
            return;
        }
        if ( _id2_ == oldChild )
        {
            SetId2 ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PFred _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PFred _base_,
        EOF _eof_)
    {
        SetPFred(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PFred) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PFred GetPFred()
    {
        return _base_;
    }
    public void SetPFred(PFred node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPFred((PFred) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
