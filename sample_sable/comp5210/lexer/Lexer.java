/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp5210.lexer;

import java.io.*;
import java.util.*;
import comp5210.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TBang(line, pos); }
    Token new1(String text, int line, int pos) { return new TWhitespace(text, line, pos); }
    Token new2(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new3(String text, int line, int pos) { return new TOp(text, line, pos); }
    Token new4(int line, int pos) { return new TClass(line, pos); }
    Token new5(int line, int pos) { return new TPublic(line, pos); }
    Token new6(int line, int pos) { return new TPrivate(line, pos); }
    Token new7(String text, int line, int pos) { return new TId(text, line, pos); }
    Token new8(int line, int pos) { return new TReturn(line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {38, 38, 6}, {42, 42, 7}, {43, 43, 8}, {45, 45, 9}, {47, 47, 10}, {60, 60, 11}, {65, 90, 12}, {97, 98, 12}, {99, 99, 13}, {100, 111, 12}, {112, 112, 14}, {113, 113, 12}, {114, 114, 15}, {115, 122, 12}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {{38, 38, 16}, },
            {},
            {},
            {},
            {{42, 42, 17}, {47, 47, 18}, },
            {},
            {{65, 90, 12}, {97, 122, 12}, },
            {{65, 90, 12}, {97, 107, 12}, {108, 108, 19}, {109, 122, 12}, },
            {{65, 90, 12}, {97, 113, 12}, {114, 114, 20}, {115, 116, 12}, {117, 117, 21}, {118, 122, 12}, },
            {{65, 90, 12}, {97, 100, 12}, {101, 101, 22}, {102, 122, 12}, },
            {},
            {{32, 41, 23}, {42, 42, 24}, {43, 127, 23}, },
            {{10, 10, 25}, {13, 13, 26}, {32, 127, 27}, },
            {{65, 90, 12}, {97, 97, 28}, {98, 122, 12}, },
            {{65, 90, 12}, {97, 104, 12}, {105, 105, 29}, {106, 122, 12}, },
            {{65, 90, 12}, {97, 97, 12}, {98, 98, 30}, {99, 122, 12}, },
            {{65, 90, 12}, {97, 115, 12}, {116, 116, 31}, {117, 122, 12}, },
            {{32, 127, -19}, },
            {{32, 42, -19}, {43, 46, 23}, {47, 47, 32}, {48, 127, 23}, },
            {},
            {},
            {{10, 127, -20}, },
            {{65, 90, 12}, {97, 114, 12}, {115, 115, 33}, {116, 122, 12}, },
            {{65, 90, 12}, {97, 117, 12}, {118, 118, 34}, {119, 122, 12}, },
            {{65, 107, -15}, {108, 108, 35}, {109, 122, 12}, },
            {{65, 90, 12}, {97, 116, 12}, {117, 117, 36}, {118, 122, 12}, },
            {{32, 127, -19}, },
            {{65, 114, -30}, {115, 115, 37}, {116, 122, 12}, },
            {{65, 90, 12}, {97, 97, 38}, {98, 122, 12}, },
            {{65, 104, -22}, {105, 105, 39}, {106, 122, 12}, },
            {{65, 113, -16}, {114, 114, 40}, {115, 122, 12}, },
            {{65, 122, -14}, },
            {{65, 115, -24}, {116, 116, 41}, {117, 122, 12}, },
            {{65, 98, -2}, {99, 99, 42}, {100, 122, 12}, },
            {{65, 90, 12}, {97, 109, 12}, {110, 110, 43}, {111, 122, 12}, },
            {{65, 100, -17}, {101, 101, 44}, {102, 122, 12}, },
            {{65, 122, -14}, },
            {{65, 122, -14}, },
            {{65, 122, -14}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 1, 1, 1, 1, 0, -1, 3, 3, 3, -1, 3, 7, 7, 7, 7, 3, -1, -1, 7, 7, 7, 7, -1, -1, 2, 2, -1, 7, 7, 7, 7, 2, 7, 7, 7, 7, 4, 7, 7, 7, 7, 5, 7, 6, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
