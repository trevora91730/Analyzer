/* This file was generated by SableCC (http://www.sablecc.org/). */

package comp5210.node;

import java.util.*;
import comp5210.analysis.*;

public final class APrivateFred extends PFred
{
    private TPrivate _private_;
    private TId _id1_;
    private TId _id2_;

    public APrivateFred()
    {
    }

    public APrivateFred(
        TPrivate _private_,
        TId _id1_,
        TId _id2_)
    {
        setPrivate(_private_);

        setId1(_id1_);

        setId2(_id2_);

    }
    public Object clone()
    {
        return new APrivateFred(
            (TPrivate) cloneNode(_private_),
            (TId) cloneNode(_id1_),
            (TId) cloneNode(_id2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrivateFred(this);
    }

    public TPrivate getPrivate()
    {
        return _private_;
    }

    public void setPrivate(TPrivate node)
    {
        if(_private_ != null)
        {
            _private_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _private_ = node;
    }

    public TId getId1()
    {
        return _id1_;
    }

    public void setId1(TId node)
    {
        if(_id1_ != null)
        {
            _id1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id1_ = node;
    }

    public TId getId2()
    {
        return _id2_;
    }

    public void setId2(TId node)
    {
        if(_id2_ != null)
        {
            _id2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id2_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_private_)
            + toString(_id1_)
            + toString(_id2_);
    }

    void removeChild(Node child)
    {
        if(_private_ == child)
        {
            _private_ = null;
            return;
        }

        if(_id1_ == child)
        {
            _id1_ = null;
            return;
        }

        if(_id2_ == child)
        {
            _id2_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_private_ == oldChild)
        {
            setPrivate((TPrivate) newChild);
            return;
        }

        if(_id1_ == oldChild)
        {
            setId1((TId) newChild);
            return;
        }

        if(_id2_ == oldChild)
        {
            setId2((TId) newChild);
            return;
        }

    }
}
